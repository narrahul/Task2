{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class TaskService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:5000/api';\n  }\n  getTasks(filters) {\n    let params = new HttpParams();\n    if (filters) {\n      Object.keys(filters).forEach(key => {\n        const value = filters[key];\n        if (value && value.toString().trim() !== '') {\n          params = params.set(key, value.toString().trim());\n        }\n      });\n    }\n    return this.http.get(`${this.apiUrl}/tasks`, {\n      params\n    });\n  }\n  createTask(task) {\n    return this.http.post(`${this.apiUrl}/tasks`, task);\n  }\n  updateTask(taskId, task) {\n    return this.http.put(`${this.apiUrl}/tasks/${taskId}`, task);\n  }\n  updateTaskStatus(taskId, status) {\n    return this.http.patch(`${this.apiUrl}/tasks/${taskId}/status`, {\n      status\n    });\n  }\n  deleteTask(taskId) {\n    return this.http.delete(`${this.apiUrl}/tasks/${taskId}`);\n  }\n  getTaskTypes() {\n    return this.http.get(`${this.apiUrl}/task-types`);\n  }\n  getContactPersons() {\n    return this.http.get(`${this.apiUrl}/contact-persons`);\n  }\n  static {\n    this.ɵfac = function TaskService_Factory(t) {\n      return new (t || TaskService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: TaskService,\n      factory: TaskService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["HttpParams","TaskService","constructor","http","apiUrl","getTasks","filters","params","Object","keys","forEach","key","value","toString","trim","set","get","createTask","task","post","updateTask","taskId","put","updateTaskStatus","status","patch","deleteTask","delete","getTaskTypes","getContactPersons","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\narra\\OneDrive\\Desktop\\Task2\\frontend\\src\\app\\services\\task.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { Task, TaskFilters } from '../models/task.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TaskService {\r\n  private apiUrl = 'http://localhost:5000/api';\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  getTasks(filters?: TaskFilters): Observable<Task[]> {\r\n    let params = new HttpParams();\r\n    \r\n    if (filters) {\r\n      Object.keys(filters).forEach(key => {\r\n        const value = filters[key as keyof TaskFilters];\r\n        if (value && value.toString().trim() !== '') {\r\n          params = params.set(key, value.toString().trim());\r\n        }\r\n      });\r\n    }\r\n\r\n    return this.http.get<Task[]>(`${this.apiUrl}/tasks`, { params });\r\n  }\r\n\r\n  createTask(task: Omit<Task, 'id' | 'date_created'>): Observable<Task> {\r\n    return this.http.post<Task>(`${this.apiUrl}/tasks`, task);\r\n  }\r\n\r\n  updateTask(taskId: number, task: Partial<Task>): Observable<Task> {\r\n    return this.http.put<Task>(`${this.apiUrl}/tasks/${taskId}`, task);\r\n  }\r\n\r\n  updateTaskStatus(taskId: number, status: 'open' | 'closed'): Observable<Task> {\r\n    return this.http.patch<Task>(`${this.apiUrl}/tasks/${taskId}/status`, { status });\r\n  }\r\n\r\n  deleteTask(taskId: number): Observable<any> {\r\n    return this.http.delete(`${this.apiUrl}/tasks/${taskId}`);\r\n  }\r\n\r\n  getTaskTypes(): Observable<string[]> {\r\n    return this.http.get<string[]>(`${this.apiUrl}/task-types`);\r\n  }\r\n\r\n  getContactPersons(): Observable<string[]> {\r\n    return this.http.get<string[]>(`${this.apiUrl}/contact-persons`);\r\n  }\r\n}\r\n"],"mappings":"AACA,SAAqBA,UAAU,QAAQ,sBAAsB;;;AAO7D,OAAM,MAAOC,WAAW;EAGtBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,MAAM,GAAG,2BAA2B;EAEJ;EAExCC,QAAQA,CAACC,OAAqB;IAC5B,IAAIC,MAAM,GAAG,IAAIP,UAAU,EAAE;IAE7B,IAAIM,OAAO,EAAE;MACXE,MAAM,CAACC,IAAI,CAACH,OAAO,CAAC,CAACI,OAAO,CAACC,GAAG,IAAG;QACjC,MAAMC,KAAK,GAAGN,OAAO,CAACK,GAAwB,CAAC;QAC/C,IAAIC,KAAK,IAAIA,KAAK,CAACC,QAAQ,EAAE,CAACC,IAAI,EAAE,KAAK,EAAE,EAAE;UAC3CP,MAAM,GAAGA,MAAM,CAACQ,GAAG,CAACJ,GAAG,EAAEC,KAAK,CAACC,QAAQ,EAAE,CAACC,IAAI,EAAE,CAAC;QACnD;MACF,CAAC,CAAC;IACJ;IAEA,OAAO,IAAI,CAACX,IAAI,CAACa,GAAG,CAAS,GAAG,IAAI,CAACZ,MAAM,QAAQ,EAAE;MAAEG;IAAM,CAAE,CAAC;EAClE;EAEAU,UAAUA,CAACC,IAAuC;IAChD,OAAO,IAAI,CAACf,IAAI,CAACgB,IAAI,CAAO,GAAG,IAAI,CAACf,MAAM,QAAQ,EAAEc,IAAI,CAAC;EAC3D;EAEAE,UAAUA,CAACC,MAAc,EAAEH,IAAmB;IAC5C,OAAO,IAAI,CAACf,IAAI,CAACmB,GAAG,CAAO,GAAG,IAAI,CAAClB,MAAM,UAAUiB,MAAM,EAAE,EAAEH,IAAI,CAAC;EACpE;EAEAK,gBAAgBA,CAACF,MAAc,EAAEG,MAAyB;IACxD,OAAO,IAAI,CAACrB,IAAI,CAACsB,KAAK,CAAO,GAAG,IAAI,CAACrB,MAAM,UAAUiB,MAAM,SAAS,EAAE;MAAEG;IAAM,CAAE,CAAC;EACnF;EAEAE,UAAUA,CAACL,MAAc;IACvB,OAAO,IAAI,CAAClB,IAAI,CAACwB,MAAM,CAAC,GAAG,IAAI,CAACvB,MAAM,UAAUiB,MAAM,EAAE,CAAC;EAC3D;EAEAO,YAAYA,CAAA;IACV,OAAO,IAAI,CAACzB,IAAI,CAACa,GAAG,CAAW,GAAG,IAAI,CAACZ,MAAM,aAAa,CAAC;EAC7D;EAEAyB,iBAAiBA,CAAA;IACf,OAAO,IAAI,CAAC1B,IAAI,CAACa,GAAG,CAAW,GAAG,IAAI,CAACZ,MAAM,kBAAkB,CAAC;EAClE;;;uBA1CWH,WAAW,EAAA6B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAXhC,WAAW;MAAAiC,OAAA,EAAXjC,WAAW,CAAAkC,IAAA;MAAAC,UAAA,EAFV;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}