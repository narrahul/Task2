{"ast":null,"code":"import { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/task.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/forms\";\nconst _c0 = a0 => ({\n  \"active\": a0\n});\nfunction TaskListComponent_span_10_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r1 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"span\", 32);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementStart(2, \"span\", 33);\n    i0.ɵɵlistener(\"click\", function TaskListComponent_span_10_Template_span_click_2_listener() {\n      i0.ɵɵrestoreView(_r1);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.clearFilters(\"task_type\"));\n    });\n    i0.ɵɵtext(3, \"x\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\"Task Type: \", ctx_r1.filters.task_type, \" \");\n  }\n}\nfunction TaskListComponent_option_22_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 34);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const type_r3 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", type_r3);\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate(type_r3);\n  }\n}\nfunction TaskListComponent_option_39_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 34);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const person_r4 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", person_r4);\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate(person_r4);\n  }\n}\nfunction TaskListComponent_div_69_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 35);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngClass\", ctx_r1.alert.type === \"success\" ? \"alert-success\" : \"alert-error\");\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\" \", ctx_r1.alert.message, \" \");\n  }\n}\nfunction TaskListComponent_div_70_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 36);\n    i0.ɵɵtext(1, \"Loading tasks...\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TaskListComponent_table_71_tr_34_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"td\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"td\");\n    i0.ɵɵelement(6, \"span\", 40);\n    i0.ɵɵtext(7);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"td\");\n    i0.ɵɵtext(9);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"td\");\n    i0.ɵɵtext(11);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(12, \"td\");\n    i0.ɵɵtext(13);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(14, \"td\")(15, \"span\", 41);\n    i0.ɵɵtext(16);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(17, \"td\")(18, \"div\", 42)(19, \"button\", 43);\n    i0.ɵɵlistener(\"click\", function TaskListComponent_table_71_tr_34_Template_button_click_19_listener() {\n      const task_r6 = i0.ɵɵrestoreView(_r5).$implicit;\n      const ctx_r1 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r1.editTask(task_r6));\n    });\n    i0.ɵɵtext(20, \"Edit\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(21, \"button\", 44);\n    i0.ɵɵlistener(\"click\", function TaskListComponent_table_71_tr_34_Template_button_click_21_listener() {\n      const task_r6 = i0.ɵɵrestoreView(_r5).$implicit;\n      const ctx_r1 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r1.toggleStatus(task_r6));\n    });\n    i0.ɵɵtext(22);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(23, \"button\", 45);\n    i0.ɵɵlistener(\"click\", function TaskListComponent_table_71_tr_34_Template_button_click_23_listener() {\n      const task_r6 = i0.ɵɵrestoreView(_r5).$implicit;\n      const ctx_r1 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r1.deleteTask(task_r6));\n    });\n    i0.ɵɵtext(24, \"Delete\");\n    i0.ɵɵelementEnd()()()();\n  }\n  if (rf & 2) {\n    const task_r6 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r1.formatDate(task_r6.date_created));\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(task_r6.entity_name);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngClass\", \"task-type-\" + task_r6.task_type.toLowerCase());\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\" \", task_r6.task_type, \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r1.formatTime(task_r6.task_time));\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(task_r6.contact_person);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(task_r6.note || \"-\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngClass\", \"status-\" + task_r6.status);\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\" \", task_r6.status, \" \");\n    i0.ɵɵadvance(6);\n    i0.ɵɵtextInterpolate1(\"Change Status to \", task_r6.status === \"open\" ? \"Closed\" : \"Open\", \"\");\n  }\n}\nfunction TaskListComponent_table_71_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"table\", 37)(1, \"thead\")(2, \"tr\")(3, \"th\");\n    i0.ɵɵtext(4, \"Date \");\n    i0.ɵɵelementStart(5, \"span\", 38);\n    i0.ɵɵtext(6, \"\\uD83D\\uDCC5\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(7, \"th\");\n    i0.ɵɵtext(8, \"Entity Name \");\n    i0.ɵɵelementStart(9, \"span\", 38);\n    i0.ɵɵtext(10, \"\\u25BC\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(11, \"th\");\n    i0.ɵɵtext(12, \"Task Type \");\n    i0.ɵɵelementStart(13, \"span\", 38);\n    i0.ɵɵtext(14, \"\\u25BC\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(15, \"th\");\n    i0.ɵɵtext(16, \"Time \");\n    i0.ɵɵelementStart(17, \"span\", 38);\n    i0.ɵɵtext(18, \"\\u25BC\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(19, \"th\");\n    i0.ɵɵtext(20, \"Contact Person \");\n    i0.ɵɵelementStart(21, \"span\", 38);\n    i0.ɵɵtext(22, \"\\u25BC\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(23, \"th\");\n    i0.ɵɵtext(24, \"Notes \");\n    i0.ɵɵelementStart(25, \"span\", 38);\n    i0.ɵɵtext(26, \"\\u25BC\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(27, \"th\");\n    i0.ɵɵtext(28, \"Status \");\n    i0.ɵɵelementStart(29, \"span\", 38);\n    i0.ɵɵtext(30, \"\\u25BC\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(31, \"th\");\n    i0.ɵɵtext(32, \"Options\");\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(33, \"tbody\");\n    i0.ɵɵtemplate(34, TaskListComponent_table_71_tr_34_Template, 25, 10, \"tr\", 39);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(34);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.tasks);\n  }\n}\nfunction TaskListComponent_div_72_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 36);\n    i0.ɵɵtext(1, \" No tasks found. Create a new task to get started. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TaskListComponent_div_73_option_24_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 34);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const hour_r8 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", hour_r8);\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate(hour_r8);\n  }\n}\nfunction TaskListComponent_div_73_option_26_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 34);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const minute_r9 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", minute_r9);\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate(minute_r9);\n  }\n}\nfunction TaskListComponent_div_73_option_37_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"option\", 34);\n  }\n  if (rf & 2) {\n    const type_r10 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", type_r10);\n  }\n}\nfunction TaskListComponent_div_73_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 46);\n    i0.ɵɵlistener(\"click\", function TaskListComponent_div_73_Template_div_click_0_listener() {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.closeModal());\n    });\n    i0.ɵɵelementStart(1, \"div\", 47);\n    i0.ɵɵlistener(\"click\", function TaskListComponent_div_73_Template_div_click_1_listener($event) {\n      i0.ɵɵrestoreView(_r7);\n      return i0.ɵɵresetView($event.stopPropagation());\n    });\n    i0.ɵɵelementStart(2, \"div\", 48)(3, \"h3\", 49);\n    i0.ɵɵtext(4, \"NEW TASK\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"div\", 50)(6, \"button\", 51);\n    i0.ɵɵlistener(\"click\", function TaskListComponent_div_73_Template_button_click_6_listener() {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.taskForm.status = \"open\");\n    });\n    i0.ɵɵtext(7, \"Open\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"button\", 51);\n    i0.ɵɵlistener(\"click\", function TaskListComponent_div_73_Template_button_click_8_listener() {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.taskForm.status = \"closed\");\n    });\n    i0.ɵɵtext(9, \"Closed\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(10, \"button\", 52);\n    i0.ɵɵlistener(\"click\", function TaskListComponent_div_73_Template_button_click_10_listener() {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.closeModal());\n    });\n    i0.ɵɵtext(11, \"\\u00D7\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(12, \"form\", 53);\n    i0.ɵɵlistener(\"ngSubmit\", function TaskListComponent_div_73_Template_form_ngSubmit_12_listener() {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.saveTask());\n    });\n    i0.ɵɵelementStart(13, \"div\", 10)(14, \"label\", 11);\n    i0.ɵɵtext(15, \"Entity name\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(16, \"input\", 54);\n    i0.ɵɵtwoWayListener(\"ngModelChange\", function TaskListComponent_div_73_Template_input_ngModelChange_16_listener($event) {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r1 = i0.ɵɵnextContext();\n      i0.ɵɵtwoWayBindingSet(ctx_r1.taskForm.entity_name, $event) || (ctx_r1.taskForm.entity_name = $event);\n      return i0.ɵɵresetView($event);\n    });\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(17, \"div\", 55)(18, \"label\", 11);\n    i0.ɵɵtext(19, \"Date\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(20, \"input\", 56);\n    i0.ɵɵtwoWayListener(\"ngModelChange\", function TaskListComponent_div_73_Template_input_ngModelChange_20_listener($event) {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r1 = i0.ɵɵnextContext();\n      i0.ɵɵtwoWayBindingSet(ctx_r1.taskForm.task_date, $event) || (ctx_r1.taskForm.task_date = $event);\n      return i0.ɵɵresetView($event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(21, \"label\", 11);\n    i0.ɵɵtext(22, \"Time\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(23, \"select\", 57);\n    i0.ɵɵtwoWayListener(\"ngModelChange\", function TaskListComponent_div_73_Template_select_ngModelChange_23_listener($event) {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r1 = i0.ɵɵnextContext();\n      i0.ɵɵtwoWayBindingSet(ctx_r1.taskForm.task_time_hour, $event) || (ctx_r1.taskForm.task_time_hour = $event);\n      return i0.ɵɵresetView($event);\n    });\n    i0.ɵɵtemplate(24, TaskListComponent_div_73_option_24_Template, 2, 2, \"option\", 15);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(25, \"select\", 58);\n    i0.ɵɵtwoWayListener(\"ngModelChange\", function TaskListComponent_div_73_Template_select_ngModelChange_25_listener($event) {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r1 = i0.ɵɵnextContext();\n      i0.ɵɵtwoWayBindingSet(ctx_r1.taskForm.task_time_minute, $event) || (ctx_r1.taskForm.task_time_minute = $event);\n      return i0.ɵɵresetView($event);\n    });\n    i0.ɵɵtemplate(26, TaskListComponent_div_73_option_26_Template, 2, 2, \"option\", 15);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(27, \"select\", 59);\n    i0.ɵɵtwoWayListener(\"ngModelChange\", function TaskListComponent_div_73_Template_select_ngModelChange_27_listener($event) {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r1 = i0.ɵɵnextContext();\n      i0.ɵɵtwoWayBindingSet(ctx_r1.taskForm.task_time_ampm, $event) || (ctx_r1.taskForm.task_time_ampm = $event);\n      return i0.ɵɵresetView($event);\n    });\n    i0.ɵɵelementStart(28, \"option\", 60);\n    i0.ɵɵtext(29, \"AM\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(30, \"option\", 61);\n    i0.ɵɵtext(31, \"PM\");\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(32, \"div\", 10)(33, \"label\", 11);\n    i0.ɵɵtext(34, \"Task type\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(35, \"input\", 62);\n    i0.ɵɵtwoWayListener(\"ngModelChange\", function TaskListComponent_div_73_Template_input_ngModelChange_35_listener($event) {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r1 = i0.ɵɵnextContext();\n      i0.ɵɵtwoWayBindingSet(ctx_r1.taskForm.task_type, $event) || (ctx_r1.taskForm.task_type = $event);\n      return i0.ɵɵresetView($event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(36, \"datalist\", 63);\n    i0.ɵɵtemplate(37, TaskListComponent_div_73_option_37_Template, 1, 1, \"option\", 15);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(38, \"div\", 10)(39, \"label\", 11);\n    i0.ɵɵtext(40, \"Contact person\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(41, \"input\", 64);\n    i0.ɵɵtwoWayListener(\"ngModelChange\", function TaskListComponent_div_73_Template_input_ngModelChange_41_listener($event) {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r1 = i0.ɵɵnextContext();\n      i0.ɵɵtwoWayBindingSet(ctx_r1.taskForm.contact_person, $event) || (ctx_r1.taskForm.contact_person = $event);\n      return i0.ɵɵresetView($event);\n    });\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(42, \"div\", 10)(43, \"label\", 11);\n    i0.ɵɵtext(44, \"Note (optional)\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(45, \"textarea\", 65);\n    i0.ɵɵtwoWayListener(\"ngModelChange\", function TaskListComponent_div_73_Template_textarea_ngModelChange_45_listener($event) {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r1 = i0.ɵɵnextContext();\n      i0.ɵɵtwoWayBindingSet(ctx_r1.taskForm.note, $event) || (ctx_r1.taskForm.note = $event);\n      return i0.ɵɵresetView($event);\n    });\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(46, \"div\", 66)(47, \"button\", 67);\n    i0.ɵɵlistener(\"click\", function TaskListComponent_div_73_Template_button_click_47_listener() {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.closeModal());\n    });\n    i0.ɵɵtext(48, \"CANCEL\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(49, \"button\", 68);\n    i0.ɵɵtext(50, \"SAVE\");\n    i0.ɵɵelementEnd()()()()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(6);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(13, _c0, ctx_r1.taskForm.status === \"open\"));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(15, _c0, ctx_r1.taskForm.status === \"closed\"));\n    i0.ɵɵadvance(8);\n    i0.ɵɵtwoWayProperty(\"ngModel\", ctx_r1.taskForm.entity_name);\n    i0.ɵɵadvance(4);\n    i0.ɵɵtwoWayProperty(\"ngModel\", ctx_r1.taskForm.task_date);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtwoWayProperty(\"ngModel\", ctx_r1.taskForm.task_time_hour);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.hours);\n    i0.ɵɵadvance();\n    i0.ɵɵtwoWayProperty(\"ngModel\", ctx_r1.taskForm.task_time_minute);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.minutes);\n    i0.ɵɵadvance();\n    i0.ɵɵtwoWayProperty(\"ngModel\", ctx_r1.taskForm.task_time_ampm);\n    i0.ɵɵadvance(8);\n    i0.ɵɵtwoWayProperty(\"ngModel\", ctx_r1.taskForm.task_type);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.taskTypes);\n    i0.ɵɵadvance(4);\n    i0.ɵɵtwoWayProperty(\"ngModel\", ctx_r1.taskForm.contact_person);\n    i0.ɵɵadvance(4);\n    i0.ɵɵtwoWayProperty(\"ngModel\", ctx_r1.taskForm.note);\n  }\n}\nexport class TaskListComponent {\n  constructor(taskService) {\n    this.taskService = taskService;\n    this.tasks = [];\n    this.taskTypes = [];\n    this.contactPersons = [];\n    this.loading = false;\n    this.showModal = false;\n    this.editingTask = null;\n    this.filters = {\n      entity_name: '',\n      task_type: '',\n      status: '',\n      contact_person: '',\n      task_date: '',\n      sort_by: 'date_created',\n      sort_order: undefined,\n      search_term: ''\n    };\n    this.taskForm = {\n      entity_name: '',\n      task_type: '',\n      task_date: '',\n      // Separate date field\n      task_time_hour: '12',\n      // Separate hour field for time picker\n      task_time_minute: '00',\n      // Separate minute field for time picker\n      task_time_ampm: 'PM',\n      // Separate AM/PM field for time picker\n      contact_person: '',\n      note: '',\n      status: 'open'\n      // Removed phone_number from taskForm\n    };\n    this.hours = Array.from({\n      length: 12\n    }, (_, i) => (i + 1).toString().padStart(2, '0'));\n    this.minutes = ['00', '15', '30', '45'];\n    this.alert = null;\n  }\n  ngOnInit() {\n    this.loadTasks();\n    this.loadTaskTypes();\n    this.loadContactPersons();\n  }\n  loadTasks() {\n    this.loading = true;\n    this.taskService.getTasks(this.filters).subscribe({\n      next: tasks => {\n        this.tasks = tasks;\n        this.loading = false;\n      },\n      error: error => {\n        this.showAlert('error', 'Error loading tasks: ' + error.message);\n        this.loading = false;\n      }\n    });\n  }\n  loadTaskTypes() {\n    console.log('Calling loadTaskTypes...');\n    this.taskService.getTaskTypes().subscribe({\n      next: types => {\n        this.taskTypes = types;\n        console.log('Task types loaded:', this.taskTypes);\n      },\n      error: error => console.error('Error loading task types:', error)\n    });\n  }\n  loadContactPersons() {\n    this.taskService.getContactPersons().subscribe({\n      next: persons => this.contactPersons = persons,\n      error: error => console.error('Error loading contact persons:', error)\n    });\n  }\n  showCreateModal() {\n    this.editingTask = null;\n    this.taskForm = {\n      entity_name: '',\n      task_type: '',\n      task_date: '',\n      // Reset to empty\n      task_time_hour: '12',\n      task_time_minute: '00',\n      task_time_ampm: 'PM',\n      contact_person: '',\n      note: '',\n      status: 'open'\n      // Removed phone_number\n    };\n    this.showModal = true;\n  }\n  editTask(task) {\n    this.editingTask = task;\n    const taskDateTime = new Date(task.task_time);\n    this.taskForm = {\n      entity_name: task.entity_name,\n      task_type: task.task_type,\n      task_date: taskDateTime.toISOString().slice(0, 10),\n      // Extract date\n      task_time_hour: this.formatHourForInput(taskDateTime),\n      // Extract hour\n      task_time_minute: this.formatMinuteForInput(taskDateTime),\n      // Extract minute\n      task_time_ampm: this.formatAmPmForInput(taskDateTime),\n      // Extract AM/PM\n      contact_person: task.contact_person,\n      note: task.note || '',\n      status: task.status\n      // Removed phone_number from task population\n    };\n    this.showModal = true;\n  }\n  duplicateTask(task) {\n    this.editingTask = null; // Treat as a new task for duplication\n    const taskDateTime = new Date(task.task_time);\n    this.taskForm = {\n      entity_name: task.entity_name,\n      task_type: task.task_type,\n      task_date: taskDateTime.toISOString().slice(0, 10),\n      task_time_hour: this.formatHourForInput(taskDateTime),\n      task_time_minute: this.formatMinuteForInput(taskDateTime),\n      task_time_ampm: this.formatAmPmForInput(taskDateTime),\n      contact_person: task.contact_person,\n      note: task.note || '',\n      status: 'open' // Default to open for duplicated tasks\n      // Removed phone_number\n    };\n    this.showModal = true;\n  }\n  saveTask() {\n    // Client-side validation\n    if (!this.taskForm.entity_name?.trim()) {\n      this.showAlert('error', 'Entity name is required');\n      return;\n    }\n    if (!this.taskForm.task_type?.trim()) {\n      this.showAlert('error', 'Task type is required');\n      return;\n    }\n    if (!this.taskForm.task_date) {\n      this.showAlert('error', 'Date is required');\n      return;\n    }\n    if (!this.taskForm.task_time_hour || !this.taskForm.task_time_minute || !this.taskForm.task_time_ampm) {\n      this.showAlert('error', 'Time is required');\n      return;\n    }\n    if (!this.taskForm.contact_person?.trim()) {\n      this.showAlert('error', 'Contact person is required');\n      return;\n    }\n    // Construct full task_time from separate date and time components\n    let hour = parseInt(this.taskForm.task_time_hour, 10);\n    if (this.taskForm.task_time_ampm === 'PM' && hour !== 12) {\n      hour += 12;\n    } else if (this.taskForm.task_time_ampm === 'AM' && hour === 12) {\n      hour = 0; // Midnight\n    }\n    const fullTaskTime = new Date(`${this.taskForm.task_date}T${hour.toString().padStart(2, '0')}:${this.taskForm.task_time_minute}:00`);\n    // Past date validation\n    const now = new Date();\n    if (fullTaskTime < now) {\n      this.showAlert('error', 'Task due time cannot be in the past');\n      return;\n    }\n    const taskToSend = {\n      entity_name: this.taskForm.entity_name.trim(),\n      task_type: this.taskForm.task_type.trim(),\n      task_time: fullTaskTime.toISOString(),\n      contact_person: this.taskForm.contact_person.trim(),\n      note: this.taskForm.note?.trim() || '',\n      status: this.taskForm.status\n      // Removed phone_number from taskToSend\n    };\n    if (this.editingTask) {\n      this.taskService.updateTask(this.editingTask.id, taskToSend).subscribe({\n        next: () => {\n          this.showAlert('success', 'Task updated successfully');\n          this.closeModal();\n          this.loadTasks();\n        },\n        error: error => this.showAlert('error', 'Error updating task: ' + error.message)\n      });\n    } else {\n      this.taskService.createTask(taskToSend).subscribe({\n        next: () => {\n          this.showAlert('success', 'Task created successfully');\n          this.closeModal();\n          this.loadTasks();\n          this.loadTaskTypes();\n          this.loadContactPersons();\n        },\n        error: error => this.showAlert('error', 'Error creating task: ' + error.message)\n      });\n    }\n  }\n  toggleStatus(task) {\n    const newStatus = task.status === 'open' ? 'closed' : 'open';\n    this.taskService.updateTaskStatus(task.id, newStatus).subscribe({\n      next: () => {\n        this.showAlert('success', `Task status changed to ${newStatus}`);\n        this.loadTasks();\n      },\n      error: error => this.showAlert('error', 'Error updating task status: ' + error.message)\n    });\n  }\n  deleteTask(task) {\n    if (confirm('Are you sure you want to delete this task?')) {\n      this.taskService.deleteTask(task.id).subscribe({\n        next: () => {\n          this.showAlert('success', 'Task deleted successfully');\n          this.loadTasks();\n        },\n        error: error => this.showAlert('error', 'Error deleting task: ' + error.message)\n      });\n    }\n  }\n  closeModal() {\n    this.showModal = false;\n    this.editingTask = null;\n  }\n  clearFilters(filterKey) {\n    if (filterKey) {\n      if (filterKey === 'sort_order') {\n        this.filters[filterKey] = undefined;\n      } else {\n        this.filters[filterKey] = '';\n      }\n    } else {\n      this.filters = {\n        entity_name: '',\n        task_type: '',\n        status: '',\n        contact_person: '',\n        task_date: '',\n        sort_by: 'date_created',\n        sort_order: undefined,\n        search_term: ''\n      };\n    }\n    this.loadTasks();\n  }\n  showAlert(type, message) {\n    this.alert = {\n      type,\n      message\n    };\n    setTimeout(() => this.alert = null, 5000);\n  }\n  formatDate(dateString) {\n    return new Date(dateString).toLocaleDateString('en-GB', {\n      day: '2-digit',\n      month: 'short',\n      year: 'numeric'\n    });\n  }\n  formatTime(dateString) {\n    return new Date(dateString).toLocaleTimeString('en-US', {\n      hour: '2-digit',\n      minute: '2-digit',\n      hour12: true\n    });\n  }\n  formatHourForInput(date) {\n    let hour = date.getHours();\n    hour = hour % 12;\n    hour = hour ? hour : 12; // the hour '0' should be '12'\n    return hour.toString().padStart(2, '0');\n  }\n  formatMinuteForInput(date) {\n    return date.getMinutes().toString().padStart(2, '0');\n  }\n  formatAmPmForInput(date) {\n    return date.getHours() >= 12 ? 'PM' : 'AM';\n  }\n  static {\n    this.ɵfac = function TaskListComponent_Factory(t) {\n      return new (t || TaskListComponent)(i0.ɵɵdirectiveInject(i1.TaskService));\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: TaskListComponent,\n      selectors: [[\"app-task-list\"]],\n      standalone: true,\n      features: [i0.ɵɵStandaloneFeature],\n      decls: 74,\n      vars: 16,\n      consts: [[1, \"card\"], [1, \"card-header\", 2, \"display\", \"flex\", \"justify-content\", \"space-between\", \"align-items\", \"center\"], [1, \"card-title\"], [2, \"display\", \"flex\", \"align-items\", \"center\", \"gap\", \"1rem\"], [1, \"search-bar\"], [\"type\", \"text\", \"placeholder\", \"Search\", 1, \"form-control\", 3, \"ngModelChange\", \"ngModel\"], [1, \"btn\", \"btn-success\", 3, \"click\"], [1, \"active-filters\"], [\"class\", \"active-filter-badge\", 4, \"ngIf\"], [1, \"filters\"], [1, \"form-group\"], [1, \"form-label\"], [\"type\", \"text\", \"placeholder\", \"Filter by entity name\", 1, \"form-control\", 3, \"ngModelChange\", \"ngModel\"], [1, \"form-control\", 3, \"ngModelChange\", \"ngModel\"], [\"value\", \"\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"value\", \"open\"], [\"value\", \"closed\"], [\"type\", \"date\", 1, \"form-control\", 3, \"ngModelChange\", \"ngModel\"], [\"value\", \"date_created\"], [\"value\", \"entity_name\"], [\"value\", \"task_type\"], [\"value\", \"task_time\"], [\"value\", \"contact_person\"], [\"value\", \"status\"], [\"value\", \"desc\"], [\"value\", \"asc\"], [1, \"actions\", 2, \"display\", \"none\"], [\"class\", \"alert\", 3, \"ngClass\", 4, \"ngIf\"], [\"class\", \"loading\", 4, \"ngIf\"], [\"class\", \"table\", 4, \"ngIf\"], [\"class\", \"modal\", 3, \"click\", 4, \"ngIf\"], [1, \"active-filter-badge\"], [1, \"clear-filter\", 3, \"click\"], [3, \"value\"], [1, \"alert\", 3, \"ngClass\"], [1, \"loading\"], [1, \"table\"], [1, \"filter-icon\"], [4, \"ngFor\", \"ngForOf\"], [1, \"task-type-icon\", 3, \"ngClass\"], [1, \"status-badge\", 3, \"ngClass\"], [2, \"display\", \"flex\", \"gap\", \"0.5rem\"], [1, \"btn\", \"btn-primary\", \"btn-sm\", 3, \"click\"], [1, \"btn\", \"btn-info\", \"btn-sm\", 3, \"click\"], [1, \"btn\", \"btn-danger\", \"btn-sm\", 3, \"click\"], [1, \"modal\", 3, \"click\"], [1, \"modal-content\", 3, \"click\"], [1, \"modal-header\"], [1, \"modal-title\"], [1, \"status-toggle\"], [3, \"click\", \"ngClass\"], [1, \"close\", 3, \"click\"], [3, \"ngSubmit\"], [\"type\", \"text\", \"name\", \"entity_name\", \"required\", \"\", 1, \"form-control\", 3, \"ngModelChange\", \"ngModel\"], [1, \"form-group\", \"date-time-group\"], [\"type\", \"date\", \"name\", \"task_date\", \"required\", \"\", 1, \"form-control\", 3, \"ngModelChange\", \"ngModel\"], [\"name\", \"task_time_hour\", \"required\", \"\", 1, \"form-control\", 3, \"ngModelChange\", \"ngModel\"], [\"name\", \"task_time_minute\", \"required\", \"\", 1, \"form-control\", 3, \"ngModelChange\", \"ngModel\"], [\"name\", \"task_time_ampm\", \"required\", \"\", 1, \"form-control\", 3, \"ngModelChange\", \"ngModel\"], [\"value\", \"AM\"], [\"value\", \"PM\"], [\"list\", \"taskTypesList\", \"name\", \"task_type\", \"required\", \"\", 1, \"form-control\", 3, \"ngModelChange\", \"ngModel\"], [\"id\", \"taskTypesList\"], [\"type\", \"text\", \"name\", \"contact_person\", \"required\", \"\", 1, \"form-control\", 3, \"ngModelChange\", \"ngModel\"], [\"name\", \"note\", \"rows\", \"3\", 1, \"form-control\", 3, \"ngModelChange\", \"ngModel\"], [2, \"display\", \"flex\", \"gap\", \"10px\", \"justify-content\", \"flex-end\", \"margin-top\", \"2rem\"], [\"type\", \"button\", 1, \"btn\", \"btn-cancel\", 3, \"click\"], [\"type\", \"submit\", 1, \"btn\", \"btn-save\"]],\n      template: function TaskListComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"h2\", 2);\n          i0.ɵɵtext(3, \"SALES LOG\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(4, \"div\", 3)(5, \"div\", 4)(6, \"input\", 5);\n          i0.ɵɵtwoWayListener(\"ngModelChange\", function TaskListComponent_Template_input_ngModelChange_6_listener($event) {\n            i0.ɵɵtwoWayBindingSet(ctx.filters.search_term, $event) || (ctx.filters.search_term = $event);\n            return $event;\n          });\n          i0.ɵɵlistener(\"ngModelChange\", function TaskListComponent_Template_input_ngModelChange_6_listener() {\n            return ctx.loadTasks();\n          });\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(7, \"button\", 6);\n          i0.ɵɵlistener(\"click\", function TaskListComponent_Template_button_click_7_listener() {\n            return ctx.showCreateModal();\n          });\n          i0.ɵɵtext(8, \"+ New Task\");\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(9, \"div\", 7);\n          i0.ɵɵtemplate(10, TaskListComponent_span_10_Template, 4, 1, \"span\", 8);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(11, \"div\", 9)(12, \"div\", 10)(13, \"label\", 11);\n          i0.ɵɵtext(14, \"Entity Name\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(15, \"input\", 12);\n          i0.ɵɵtwoWayListener(\"ngModelChange\", function TaskListComponent_Template_input_ngModelChange_15_listener($event) {\n            i0.ɵɵtwoWayBindingSet(ctx.filters.entity_name, $event) || (ctx.filters.entity_name = $event);\n            return $event;\n          });\n          i0.ɵɵlistener(\"ngModelChange\", function TaskListComponent_Template_input_ngModelChange_15_listener() {\n            return ctx.loadTasks();\n          });\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(16, \"div\", 10)(17, \"label\", 11);\n          i0.ɵɵtext(18, \"Task Type\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(19, \"select\", 13);\n          i0.ɵɵtwoWayListener(\"ngModelChange\", function TaskListComponent_Template_select_ngModelChange_19_listener($event) {\n            i0.ɵɵtwoWayBindingSet(ctx.filters.task_type, $event) || (ctx.filters.task_type = $event);\n            return $event;\n          });\n          i0.ɵɵlistener(\"ngModelChange\", function TaskListComponent_Template_select_ngModelChange_19_listener() {\n            return ctx.loadTasks();\n          });\n          i0.ɵɵelementStart(20, \"option\", 14);\n          i0.ɵɵtext(21, \"All Types\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(22, TaskListComponent_option_22_Template, 2, 2, \"option\", 15);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(23, \"div\", 10)(24, \"label\", 11);\n          i0.ɵɵtext(25, \"Status\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(26, \"select\", 13);\n          i0.ɵɵtwoWayListener(\"ngModelChange\", function TaskListComponent_Template_select_ngModelChange_26_listener($event) {\n            i0.ɵɵtwoWayBindingSet(ctx.filters.status, $event) || (ctx.filters.status = $event);\n            return $event;\n          });\n          i0.ɵɵlistener(\"ngModelChange\", function TaskListComponent_Template_select_ngModelChange_26_listener() {\n            return ctx.loadTasks();\n          });\n          i0.ɵɵelementStart(27, \"option\", 14);\n          i0.ɵɵtext(28, \"All Status\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(29, \"option\", 16);\n          i0.ɵɵtext(30, \"Open\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(31, \"option\", 17);\n          i0.ɵɵtext(32, \"Closed\");\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(33, \"div\", 10)(34, \"label\", 11);\n          i0.ɵɵtext(35, \"Contact Person\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(36, \"select\", 13);\n          i0.ɵɵtwoWayListener(\"ngModelChange\", function TaskListComponent_Template_select_ngModelChange_36_listener($event) {\n            i0.ɵɵtwoWayBindingSet(ctx.filters.contact_person, $event) || (ctx.filters.contact_person = $event);\n            return $event;\n          });\n          i0.ɵɵlistener(\"ngModelChange\", function TaskListComponent_Template_select_ngModelChange_36_listener() {\n            return ctx.loadTasks();\n          });\n          i0.ɵɵelementStart(37, \"option\", 14);\n          i0.ɵɵtext(38, \"All Persons\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(39, TaskListComponent_option_39_Template, 2, 2, \"option\", 15);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(40, \"div\", 10)(41, \"label\", 11);\n          i0.ɵɵtext(42, \"Task Due Date\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(43, \"input\", 18);\n          i0.ɵɵtwoWayListener(\"ngModelChange\", function TaskListComponent_Template_input_ngModelChange_43_listener($event) {\n            i0.ɵɵtwoWayBindingSet(ctx.filters.task_date, $event) || (ctx.filters.task_date = $event);\n            return $event;\n          });\n          i0.ɵɵlistener(\"ngModelChange\", function TaskListComponent_Template_input_ngModelChange_43_listener() {\n            return ctx.loadTasks();\n          });\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(44, \"div\", 10)(45, \"label\", 11);\n          i0.ɵɵtext(46, \"Sort By\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(47, \"select\", 13);\n          i0.ɵɵtwoWayListener(\"ngModelChange\", function TaskListComponent_Template_select_ngModelChange_47_listener($event) {\n            i0.ɵɵtwoWayBindingSet(ctx.filters.sort_by, $event) || (ctx.filters.sort_by = $event);\n            return $event;\n          });\n          i0.ɵɵlistener(\"ngModelChange\", function TaskListComponent_Template_select_ngModelChange_47_listener() {\n            return ctx.loadTasks();\n          });\n          i0.ɵɵelementStart(48, \"option\", 19);\n          i0.ɵɵtext(49, \"Date Created\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(50, \"option\", 20);\n          i0.ɵɵtext(51, \"Entity Name\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(52, \"option\", 21);\n          i0.ɵɵtext(53, \"Task Type\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(54, \"option\", 22);\n          i0.ɵɵtext(55, \"Task Time\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(56, \"option\", 23);\n          i0.ɵɵtext(57, \"Contact Person\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(58, \"option\", 24);\n          i0.ɵɵtext(59, \"Status\");\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(60, \"div\", 10)(61, \"label\", 11);\n          i0.ɵɵtext(62, \"Sort Order\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(63, \"select\", 13);\n          i0.ɵɵtwoWayListener(\"ngModelChange\", function TaskListComponent_Template_select_ngModelChange_63_listener($event) {\n            i0.ɵɵtwoWayBindingSet(ctx.filters.sort_order, $event) || (ctx.filters.sort_order = $event);\n            return $event;\n          });\n          i0.ɵɵlistener(\"ngModelChange\", function TaskListComponent_Template_select_ngModelChange_63_listener() {\n            return ctx.loadTasks();\n          });\n          i0.ɵɵelementStart(64, \"option\", 25);\n          i0.ɵɵtext(65, \"Descending\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(66, \"option\", 26);\n          i0.ɵɵtext(67, \"Ascending\");\n          i0.ɵɵelementEnd()()()();\n          i0.ɵɵelement(68, \"div\", 27);\n          i0.ɵɵtemplate(69, TaskListComponent_div_69_Template, 2, 2, \"div\", 28)(70, TaskListComponent_div_70_Template, 2, 0, \"div\", 29)(71, TaskListComponent_table_71_Template, 35, 1, \"table\", 30)(72, TaskListComponent_div_72_Template, 2, 0, \"div\", 29);\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(73, TaskListComponent_div_73_Template, 51, 17, \"div\", 31);\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(6);\n          i0.ɵɵtwoWayProperty(\"ngModel\", ctx.filters.search_term);\n          i0.ɵɵadvance(4);\n          i0.ɵɵproperty(\"ngIf\", ctx.filters.task_type);\n          i0.ɵɵadvance(5);\n          i0.ɵɵtwoWayProperty(\"ngModel\", ctx.filters.entity_name);\n          i0.ɵɵadvance(4);\n          i0.ɵɵtwoWayProperty(\"ngModel\", ctx.filters.task_type);\n          i0.ɵɵadvance(3);\n          i0.ɵɵproperty(\"ngForOf\", ctx.taskTypes);\n          i0.ɵɵadvance(4);\n          i0.ɵɵtwoWayProperty(\"ngModel\", ctx.filters.status);\n          i0.ɵɵadvance(10);\n          i0.ɵɵtwoWayProperty(\"ngModel\", ctx.filters.contact_person);\n          i0.ɵɵadvance(3);\n          i0.ɵɵproperty(\"ngForOf\", ctx.contactPersons);\n          i0.ɵɵadvance(4);\n          i0.ɵɵtwoWayProperty(\"ngModel\", ctx.filters.task_date);\n          i0.ɵɵadvance(4);\n          i0.ɵɵtwoWayProperty(\"ngModel\", ctx.filters.sort_by);\n          i0.ɵɵadvance(16);\n          i0.ɵɵtwoWayProperty(\"ngModel\", ctx.filters.sort_order);\n          i0.ɵɵadvance(6);\n          i0.ɵɵproperty(\"ngIf\", ctx.alert);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngIf\", ctx.loading);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngIf\", !ctx.loading && ctx.tasks.length > 0);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngIf\", !ctx.loading && ctx.tasks.length === 0);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngIf\", ctx.showModal);\n        }\n      },\n      dependencies: [CommonModule, i2.NgClass, i2.NgForOf, i2.NgIf, FormsModule, i3.ɵNgNoValidate, i3.NgSelectOption, i3.ɵNgSelectMultipleOption, i3.DefaultValueAccessor, i3.SelectControlValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.RequiredValidator, i3.NgModel, i3.NgForm],\n      encapsulation: 2\n    });\n  }\n}","map":{"version":3,"names":["CommonModule","FormsModule","i0","ɵɵelementStart","ɵɵtext","ɵɵlistener","TaskListComponent_span_10_Template_span_click_2_listener","ɵɵrestoreView","_r1","ctx_r1","ɵɵnextContext","ɵɵresetView","clearFilters","ɵɵelementEnd","ɵɵadvance","ɵɵtextInterpolate1","filters","task_type","ɵɵproperty","type_r3","ɵɵtextInterpolate","person_r4","alert","type","message","ɵɵelement","TaskListComponent_table_71_tr_34_Template_button_click_19_listener","task_r6","_r5","$implicit","editTask","TaskListComponent_table_71_tr_34_Template_button_click_21_listener","toggleStatus","TaskListComponent_table_71_tr_34_Template_button_click_23_listener","deleteTask","formatDate","date_created","entity_name","toLowerCase","formatTime","task_time","contact_person","note","status","ɵɵtemplate","TaskListComponent_table_71_tr_34_Template","tasks","hour_r8","minute_r9","type_r10","TaskListComponent_div_73_Template_div_click_0_listener","_r7","closeModal","TaskListComponent_div_73_Template_div_click_1_listener","$event","stopPropagation","TaskListComponent_div_73_Template_button_click_6_listener","taskForm","TaskListComponent_div_73_Template_button_click_8_listener","TaskListComponent_div_73_Template_button_click_10_listener","TaskListComponent_div_73_Template_form_ngSubmit_12_listener","saveTask","ɵɵtwoWayListener","TaskListComponent_div_73_Template_input_ngModelChange_16_listener","ɵɵtwoWayBindingSet","TaskListComponent_div_73_Template_input_ngModelChange_20_listener","task_date","TaskListComponent_div_73_Template_select_ngModelChange_23_listener","task_time_hour","TaskListComponent_div_73_option_24_Template","TaskListComponent_div_73_Template_select_ngModelChange_25_listener","task_time_minute","TaskListComponent_div_73_option_26_Template","TaskListComponent_div_73_Template_select_ngModelChange_27_listener","task_time_ampm","TaskListComponent_div_73_Template_input_ngModelChange_35_listener","TaskListComponent_div_73_option_37_Template","TaskListComponent_div_73_Template_input_ngModelChange_41_listener","TaskListComponent_div_73_Template_textarea_ngModelChange_45_listener","TaskListComponent_div_73_Template_button_click_47_listener","ɵɵpureFunction1","_c0","ɵɵtwoWayProperty","hours","minutes","taskTypes","TaskListComponent","constructor","taskService","contactPersons","loading","showModal","editingTask","sort_by","sort_order","undefined","search_term","Array","from","length","_","i","toString","padStart","ngOnInit","loadTasks","loadTaskTypes","loadContactPersons","getTasks","subscribe","next","error","showAlert","console","log","getTaskTypes","types","getContactPersons","persons","showCreateModal","task","taskDateTime","Date","toISOString","slice","formatHourForInput","formatMinuteForInput","formatAmPmForInput","duplicateTask","trim","hour","parseInt","fullTaskTime","now","taskToSend","updateTask","id","createTask","newStatus","updateTaskStatus","confirm","filterKey","setTimeout","dateString","toLocaleDateString","day","month","year","toLocaleTimeString","minute","hour12","date","getHours","getMinutes","ɵɵdirectiveInject","i1","TaskService","selectors","standalone","features","ɵɵStandaloneFeature","decls","vars","consts","template","TaskListComponent_Template","rf","ctx","TaskListComponent_Template_input_ngModelChange_6_listener","TaskListComponent_Template_button_click_7_listener","TaskListComponent_span_10_Template","TaskListComponent_Template_input_ngModelChange_15_listener","TaskListComponent_Template_select_ngModelChange_19_listener","TaskListComponent_option_22_Template","TaskListComponent_Template_select_ngModelChange_26_listener","TaskListComponent_Template_select_ngModelChange_36_listener","TaskListComponent_option_39_Template","TaskListComponent_Template_input_ngModelChange_43_listener","TaskListComponent_Template_select_ngModelChange_47_listener","TaskListComponent_Template_select_ngModelChange_63_listener","TaskListComponent_div_69_Template","TaskListComponent_div_70_Template","TaskListComponent_table_71_Template","TaskListComponent_div_72_Template","TaskListComponent_div_73_Template","i2","NgClass","NgForOf","NgIf","i3","ɵNgNoValidate","NgSelectOption","ɵNgSelectMultipleOption","DefaultValueAccessor","SelectControlValueAccessor","NgControlStatus","NgControlStatusGroup","RequiredValidator","NgModel","NgForm","encapsulation"],"sources":["C:\\Users\\narra\\OneDrive\\Desktop\\Task2\\frontend\\src\\app\\task-list\\task-list.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { TaskService } from '../services/task.service';\r\nimport { Task, TaskFilters } from '../models/task.model';\r\n\r\n@Component({\r\n  selector: 'app-task-list',\r\n  standalone: true,\r\n  imports: [CommonModule, FormsModule],\r\n  template: `\r\n    <div class=\"card\">\r\n      <!-- Card Header (Sales Log title, New Task button, Search Bar) -->\r\n      <div class=\"card-header\" style=\"display: flex; justify-content: space-between; align-items: center;\">\r\n        <h2 class=\"card-title\">SALES LOG</h2>\r\n        <div style=\"display: flex; align-items: center; gap: 1rem;\">\r\n          <div class=\"search-bar\">\r\n            <input type=\"text\" placeholder=\"Search\" class=\"form-control\" [(ngModel)]=\"filters.search_term\" (ngModelChange)=\"loadTasks()\">\r\n          </div>\r\n          <button class=\"btn btn-success\" (click)=\"showCreateModal()\">+ New Task</button>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Active Filters Display (e.g., Task Type: Call) -->\r\n      <div class=\"active-filters\">\r\n        <!-- This area will dynamically display active filters, like \"Task Type: Call\" -->\r\n        <span *ngIf=\"filters.task_type\" class=\"active-filter-badge\">Task Type: {{ filters.task_type }} <span class=\"clear-filter\" (click)=\"clearFilters('task_type')\">x</span></span>\r\n        <!-- Add similar badges for other active filters -->\r\n      </div>\r\n\r\n      <!-- Original Filters Section (hidden for now, will be replaced by integrated filtering) -->\r\n      <div class=\"filters\">\r\n        <div class=\"form-group\">\r\n          <label class=\"form-label\">Entity Name</label>\r\n          <input type=\"text\" class=\"form-control\" [(ngModel)]=\"filters.entity_name\" placeholder=\"Filter by entity name\" (ngModelChange)=\"loadTasks()\">\r\n        </div>\r\n\r\n        <div class=\"form-group\">\r\n          <label class=\"form-label\">Task Type</label>\r\n          <select class=\"form-control\" [(ngModel)]=\"filters.task_type\" (ngModelChange)=\"loadTasks()\">\r\n            <option value=\"\">All Types</option>\r\n            <option *ngFor=\"let type of taskTypes\" [value]=\"type\">{{ type }}</option>\r\n          </select>\r\n        </div>\r\n\r\n        <div class=\"form-group\">\r\n          <label class=\"form-label\">Status</label>\r\n          <select class=\"form-control\" [(ngModel)]=\"filters.status\" (ngModelChange)=\"loadTasks()\">\r\n            <option value=\"\">All Status</option>\r\n            <option value=\"open\">Open</option>\r\n            <option value=\"closed\">Closed</option>\r\n          </select>\r\n        </div>\r\n\r\n        <div class=\"form-group\">\r\n          <label class=\"form-label\">Contact Person</label>\r\n          <select class=\"form-control\" [(ngModel)]=\"filters.contact_person\" (ngModelChange)=\"loadTasks()\">\r\n            <option value=\"\">All Persons</option>\r\n            <option *ngFor=\"let person of contactPersons\" [value]=\"person\">{{ person }}</option>\r\n          </select>\r\n        </div>\r\n\r\n        <div class=\"form-group\">\r\n          <label class=\"form-label\">Task Due Date</label>\r\n          <input type=\"date\" class=\"form-control\" [(ngModel)]=\"filters.task_date\" (ngModelChange)=\"loadTasks()\">\r\n        </div>\r\n\r\n        <div class=\"form-group\">\r\n          <label class=\"form-label\">Sort By</label>\r\n          <select class=\"form-control\" [(ngModel)]=\"filters.sort_by\" (ngModelChange)=\"loadTasks()\">\r\n            <option value=\"date_created\">Date Created</option>\r\n            <option value=\"entity_name\">Entity Name</option>\r\n            <option value=\"task_type\">Task Type</option>\r\n            <option value=\"task_time\">Task Time</option>\r\n            <option value=\"contact_person\">Contact Person</option>\r\n            <option value=\"status\">Status</option>\r\n          </select>\r\n        </div>\r\n\r\n        <div class=\"form-group\">\r\n          <label class=\"form-label\">Sort Order</label>\r\n          <select class=\"form-control\" [(ngModel)]=\"filters.sort_order\" (ngModelChange)=\"loadTasks()\">\r\n            <option value=\"desc\">Descending</option>\r\n            <option value=\"asc\">Ascending</option>\r\n          </select>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Actions (Moved into card-header or will be part of table actions) -->\r\n      <div class=\"actions\" style=\"display: none;\">\r\n      </div>\r\n\r\n      <!-- Alerts -->\r\n      <div *ngIf=\"alert\" class=\"alert\" [ngClass]=\"alert.type === 'success' ? 'alert-success' : 'alert-error'\">\r\n        {{ alert.message }}\r\n      </div>\r\n\r\n      <!-- Loading -->\r\n      <div *ngIf=\"loading\" class=\"loading\">Loading tasks...</div>\r\n\r\n      <!-- Task Table -->\r\n      <table *ngIf=\"!loading && tasks.length > 0\" class=\"table\">\r\n        <thead>\r\n          <tr>\r\n            <th>Date <span class=\"filter-icon\">📅</span></th>\r\n            <th>Entity Name <span class=\"filter-icon\">▼</span></th>\r\n            <th>Task Type <span class=\"filter-icon\">▼</span></th>\r\n            <th>Time <span class=\"filter-icon\">▼</span></th>\r\n            <th>Contact Person <span class=\"filter-icon\">▼</span></th>\r\n            <th>Notes <span class=\"filter-icon\">▼</span></th>\r\n            <th>Status <span class=\"filter-icon\">▼</span></th>\r\n            <th>Options</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <!-- We will need to implement date grouping here later -->\r\n          <tr *ngFor=\"let task of tasks\">\r\n            <td>{{ formatDate(task.date_created) }}</td>\r\n            <td>{{ task.entity_name }}</td>\r\n            <td>\r\n              <span class=\"task-type-icon\" [ngClass]=\"'task-type-' + task.task_type.toLowerCase()\"></span>\r\n              {{ task.task_type }}\r\n            </td>\r\n            <td>{{ formatTime(task.task_time) }}</td>\r\n            <td>{{ task.contact_person }}</td>\r\n            <td>{{ task.note || '-' }}</td>\r\n            <td>\r\n              <span class=\"status-badge\" [ngClass]=\"'status-' + task.status\">\r\n                {{ task.status }}\r\n              </span>\r\n            </td>\r\n            <td>\r\n              <div style=\"display: flex; gap: 0.5rem;\">\r\n                <button class=\"btn btn-primary btn-sm\" (click)=\"editTask(task)\">Edit</button>\r\n                <button class=\"btn btn-info btn-sm\" (click)=\"toggleStatus(task)\">Change Status to {{ task.status === 'open' ? 'Closed' : 'Open' }}</button>\r\n                <button class=\"btn btn-danger btn-sm\" (click)=\"deleteTask(task)\">Delete</button>\r\n              </div>\r\n            </td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n\r\n      <!-- No Tasks Message -->\r\n      <div *ngIf=\"!loading && tasks.length === 0\" class=\"loading\">\r\n        No tasks found. Create a new task to get started.\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Create/Edit Task Modal -->\r\n    <div *ngIf=\"showModal\" class=\"modal\" (click)=\"closeModal()\">\r\n      <div class=\"modal-content\" (click)=\"$event.stopPropagation()\">\r\n        <div class=\"modal-header\">\r\n          <h3 class=\"modal-title\">NEW TASK</h3>\r\n          <div class=\"status-toggle\">\r\n            <button [ngClass]=\"{'active': taskForm.status === 'open'}\" (click)=\"taskForm.status = 'open'\">Open</button>\r\n            <button [ngClass]=\"{'active': taskForm.status === 'closed'}\" (click)=\"taskForm.status = 'closed'\">Closed</button>\r\n          </div>\r\n          <button class=\"close\" (click)=\"closeModal()\">&times;</button>\r\n        </div>\r\n        \r\n        <form (ngSubmit)=\"saveTask()\">\r\n          <div class=\"form-group\">\r\n            <label class=\"form-label\">Entity name</label>\r\n            <input type=\"text\" class=\"form-control\" [(ngModel)]=\"taskForm.entity_name\" name=\"entity_name\" required>\r\n          </div>\r\n          \r\n          <div class=\"form-group date-time-group\">\r\n            <label class=\"form-label\">Date</label>\r\n            <input type=\"date\" class=\"form-control\" [(ngModel)]=\"taskForm.task_date\" name=\"task_date\" required>\r\n            <label class=\"form-label\">Time</label>\r\n            <select class=\"form-control\" [(ngModel)]=\"taskForm.task_time_hour\" name=\"task_time_hour\" required>\r\n              <option *ngFor=\"let hour of hours\" [value]=\"hour\">{{ hour }}</option>\r\n            </select>\r\n            <select class=\"form-control\" [(ngModel)]=\"taskForm.task_time_minute\" name=\"task_time_minute\" required>\r\n              <option *ngFor=\"let minute of minutes\" [value]=\"minute\">{{ minute }}</option>\r\n            </select>\r\n            <select class=\"form-control\" [(ngModel)]=\"taskForm.task_time_ampm\" name=\"task_time_ampm\" required>\r\n              <option value=\"AM\">AM</option>\r\n              <option value=\"PM\">PM</option>\r\n            </select>\r\n          </div>\r\n          \r\n          <div class=\"form-group\">\r\n            <label class=\"form-label\">Task type</label>\r\n            <input list=\"taskTypesList\" class=\"form-control\" [(ngModel)]=\"taskForm.task_type\" name=\"task_type\" required>\r\n            <datalist id=\"taskTypesList\">\r\n              <option *ngFor=\"let type of taskTypes\" [value]=\"type\"></option>\r\n            </datalist>\r\n          </div>\r\n\r\n          <!-- Removed Phone number field as per JD -->\r\n          \r\n          <div class=\"form-group\">\r\n            <label class=\"form-label\">Contact person</label>\r\n            <input type=\"text\" class=\"form-control\" [(ngModel)]=\"taskForm.contact_person\" name=\"contact_person\" required>\r\n          </div>\r\n          \r\n          <div class=\"form-group\">\r\n            <label class=\"form-label\">Note (optional)</label>\r\n            <textarea class=\"form-control\" [(ngModel)]=\"taskForm.note\" name=\"note\" rows=\"3\"></textarea>\r\n          </div>\r\n          \r\n          <div style=\"display: flex; gap: 10px; justify-content: flex-end; margin-top: 2rem;\">\r\n            <button type=\"button\" class=\"btn btn-cancel\" (click)=\"closeModal()\">CANCEL</button>\r\n            <button type=\"submit\" class=\"btn btn-save\">SAVE</button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  `\r\n})\r\nexport class TaskListComponent implements OnInit {\r\n  tasks: Task[] = [];\r\n  taskTypes: string[] = [];\r\n  contactPersons: string[] = [];\r\n  loading = false;\r\n  showModal = false;\r\n  editingTask: Task | null = null;\r\n  \r\n  filters: TaskFilters = {\r\n    entity_name: '',\r\n    task_type: '',\r\n    status: '',\r\n    contact_person: '',\r\n    task_date: '',\r\n    sort_by: 'date_created',\r\n    sort_order: undefined,\r\n    search_term: ''\r\n  };\r\n  \r\n  taskForm: any = {\r\n    entity_name: '',\r\n    task_type: '',\r\n    task_date: '', // Separate date field\r\n    task_time_hour: '12', // Separate hour field for time picker\r\n    task_time_minute: '00', // Separate minute field for time picker\r\n    task_time_ampm: 'PM', // Separate AM/PM field for time picker\r\n    contact_person: '',\r\n    note: '',\r\n    status: 'open'\r\n    // Removed phone_number from taskForm\r\n  };\r\n\r\n  hours: string[] = Array.from({ length: 12 }, (_, i) => (i + 1).toString().padStart(2, '0'));\r\n  minutes: string[] = ['00', '15', '30', '45'];\r\n  \r\n  alert: { type: 'success' | 'error', message: string } | null = null;\r\n\r\n  constructor(private taskService: TaskService) {}\r\n\r\n  ngOnInit() {\r\n    this.loadTasks();\r\n    this.loadTaskTypes();\r\n    this.loadContactPersons();\r\n  }\r\n\r\n  loadTasks() {\r\n    this.loading = true;\r\n    this.taskService.getTasks(this.filters).subscribe({\r\n      next: (tasks) => {\r\n        this.tasks = tasks;\r\n        this.loading = false;\r\n      },\r\n      error: (error) => {\r\n        this.showAlert('error', 'Error loading tasks: ' + error.message);\r\n        this.loading = false;\r\n      }\r\n    });\r\n  }\r\n\r\n  loadTaskTypes() {\r\n    console.log('Calling loadTaskTypes...');\r\n    this.taskService.getTaskTypes().subscribe({\r\n      next: (types) => {\r\n        this.taskTypes = types;\r\n        console.log('Task types loaded:', this.taskTypes);\r\n      },\r\n      error: (error) => console.error('Error loading task types:', error)\r\n    });\r\n  }\r\n\r\n  loadContactPersons() {\r\n    this.taskService.getContactPersons().subscribe({\r\n      next: (persons) => this.contactPersons = persons,\r\n      error: (error) => console.error('Error loading contact persons:', error)\r\n    });\r\n  }\r\n\r\n  showCreateModal() {\r\n    this.editingTask = null;\r\n    this.taskForm = {\r\n      entity_name: '',\r\n      task_type: '',\r\n      task_date: '', // Reset to empty\r\n      task_time_hour: '12',\r\n      task_time_minute: '00',\r\n      task_time_ampm: 'PM',\r\n      contact_person: '',\r\n      note: '',\r\n      status: 'open'\r\n      // Removed phone_number\r\n    };\r\n    this.showModal = true;\r\n  }\r\n\r\n  editTask(task: Task) {\r\n    this.editingTask = task;\r\n    const taskDateTime = new Date(task.task_time);\r\n    this.taskForm = {\r\n      entity_name: task.entity_name,\r\n      task_type: task.task_type,\r\n      task_date: taskDateTime.toISOString().slice(0, 10), // Extract date\r\n      task_time_hour: this.formatHourForInput(taskDateTime), // Extract hour\r\n      task_time_minute: this.formatMinuteForInput(taskDateTime), // Extract minute\r\n      task_time_ampm: this.formatAmPmForInput(taskDateTime), // Extract AM/PM\r\n      contact_person: task.contact_person,\r\n      note: task.note || '',\r\n      status: task.status\r\n      // Removed phone_number from task population\r\n    };\r\n    this.showModal = true;\r\n  }\r\n\r\n  duplicateTask(task: Task) {\r\n    this.editingTask = null; // Treat as a new task for duplication\r\n    const taskDateTime = new Date(task.task_time);\r\n    this.taskForm = {\r\n      entity_name: task.entity_name,\r\n      task_type: task.task_type,\r\n      task_date: taskDateTime.toISOString().slice(0, 10),\r\n      task_time_hour: this.formatHourForInput(taskDateTime),\r\n      task_time_minute: this.formatMinuteForInput(taskDateTime),\r\n      task_time_ampm: this.formatAmPmForInput(taskDateTime),\r\n      contact_person: task.contact_person,\r\n      note: task.note || '',\r\n      status: 'open' // Default to open for duplicated tasks\r\n      // Removed phone_number\r\n    };\r\n    this.showModal = true;\r\n  }\r\n\r\n  saveTask() {\r\n    // Client-side validation\r\n    if (!this.taskForm.entity_name?.trim()) { this.showAlert('error', 'Entity name is required'); return; }\r\n    if (!this.taskForm.task_type?.trim()) { this.showAlert('error', 'Task type is required'); return; }\r\n    if (!this.taskForm.task_date) { this.showAlert('error', 'Date is required'); return; }\r\n    if (!this.taskForm.task_time_hour || !this.taskForm.task_time_minute || !this.taskForm.task_time_ampm) { this.showAlert('error', 'Time is required'); return; }\r\n    if (!this.taskForm.contact_person?.trim()) { this.showAlert('error', 'Contact person is required'); return; }\r\n\r\n    // Construct full task_time from separate date and time components\r\n    let hour = parseInt(this.taskForm.task_time_hour, 10);\r\n    if (this.taskForm.task_time_ampm === 'PM' && hour !== 12) {\r\n      hour += 12;\r\n    } else if (this.taskForm.task_time_ampm === 'AM' && hour === 12) {\r\n      hour = 0; // Midnight\r\n    }\r\n    const fullTaskTime = new Date(`${this.taskForm.task_date}T${hour.toString().padStart(2, '0')}:${this.taskForm.task_time_minute}:00`);\r\n\r\n    // Past date validation\r\n    const now = new Date();\r\n    if (fullTaskTime < now) {\r\n      this.showAlert('error', 'Task due time cannot be in the past');\r\n      return;\r\n    }\r\n\r\n    const taskToSend = {\r\n      entity_name: this.taskForm.entity_name.trim(),\r\n      task_type: this.taskForm.task_type.trim(),\r\n      task_time: fullTaskTime.toISOString(),\r\n      contact_person: this.taskForm.contact_person.trim(),\r\n      note: this.taskForm.note?.trim() || '',\r\n      status: this.taskForm.status\r\n      // Removed phone_number from taskToSend\r\n    };\r\n\r\n    if (this.editingTask) {\r\n      this.taskService.updateTask(this.editingTask.id!, taskToSend).subscribe({\r\n        next: () => {\r\n          this.showAlert('success', 'Task updated successfully');\r\n          this.closeModal();\r\n          this.loadTasks();\r\n        },\r\n        error: (error) => this.showAlert('error', 'Error updating task: ' + error.message)\r\n      });\r\n    } else {\r\n      this.taskService.createTask(taskToSend).subscribe({\r\n        next: () => {\r\n          this.showAlert('success', 'Task created successfully');\r\n          this.closeModal();\r\n          this.loadTasks();\r\n          this.loadTaskTypes();\r\n          this.loadContactPersons();\r\n        },\r\n        error: (error) => this.showAlert('error', 'Error creating task: ' + error.message)\r\n      });\r\n    }\r\n  }\r\n\r\n  toggleStatus(task: Task) {\r\n    const newStatus = task.status === 'open' ? 'closed' : 'open';\r\n    this.taskService.updateTaskStatus(task.id!, newStatus).subscribe({\r\n      next: () => {\r\n        this.showAlert('success', `Task status changed to ${newStatus}`);\r\n        this.loadTasks();\r\n      },\r\n      error: (error) => this.showAlert('error', 'Error updating task status: ' + error.message)\r\n    });\r\n  }\r\n\r\n  deleteTask(task: Task) {\r\n    if (confirm('Are you sure you want to delete this task?')) {\r\n      this.taskService.deleteTask(task.id!).subscribe({\r\n        next: () => {\r\n          this.showAlert('success', 'Task deleted successfully');\r\n          this.loadTasks();\r\n        },\r\n        error: (error) => this.showAlert('error', 'Error deleting task: ' + error.message)\r\n      });\r\n    }\r\n  }\r\n\r\n  closeModal() {\r\n    this.showModal = false;\r\n    this.editingTask = null;\r\n  }\r\n\r\n  clearFilters(filterKey?: keyof TaskFilters) {\r\n    if (filterKey) {\r\n      if (filterKey === 'sort_order') {\r\n        this.filters[filterKey] = undefined;\r\n      } else {\r\n        this.filters[filterKey] = '';\r\n      }\r\n    } else {\r\n      this.filters = {\r\n        entity_name: '',\r\n        task_type: '',\r\n        status: '',\r\n        contact_person: '',\r\n        task_date: '',\r\n        sort_by: 'date_created',\r\n        sort_order: undefined,\r\n        search_term: ''\r\n      };\r\n    }\r\n    this.loadTasks();\r\n  }\r\n\r\n  showAlert(type: 'success' | 'error', message: string) {\r\n    this.alert = { type, message };\r\n    setTimeout(() => this.alert = null, 5000);\r\n  }\r\n\r\n  formatDate(dateString: string): string {\r\n    return new Date(dateString).toLocaleDateString('en-GB', { day: '2-digit', month: 'short', year: 'numeric' });\r\n  }\r\n\r\n  formatTime(dateString: string): string {\r\n    return new Date(dateString).toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit', hour12: true });\r\n  }\r\n\r\n  private formatHourForInput(date: Date): string {\r\n    let hour = date.getHours();\r\n    hour = hour % 12;\r\n    hour = hour ? hour : 12; // the hour '0' should be '12'\r\n    return hour.toString().padStart(2, '0');\r\n  }\r\n\r\n  private formatMinuteForInput(date: Date): string {\r\n    return date.getMinutes().toString().padStart(2, '0');\r\n  }\r\n\r\n  private formatAmPmForInput(date: Date): string {\r\n    return date.getHours() >= 12 ? 'PM' : 'AM';\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}