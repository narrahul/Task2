{"ast":null,"code":"import { CommonModule, DatePipe } from '@angular/common'; // Added DatePipe\nimport { FormsModule } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/task.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/forms\";\nconst _c0 = a0 => ({\n  \"active\": a0\n});\nfunction TaskListComponent_span_8_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r1 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"span\", 31);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementStart(2, \"span\", 32);\n    i0.ɵɵlistener(\"click\", function TaskListComponent_span_8_Template_span_click_2_listener() {\n      i0.ɵɵrestoreView(_r1);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.clearFilters(\"entity_name\"));\n    });\n    i0.ɵɵtext(3, \"x\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\"Entity Name: \", ctx_r1.filters.entity_name, \" \");\n  }\n}\nfunction TaskListComponent_span_9_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"span\", 31);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementStart(2, \"span\", 32);\n    i0.ɵɵlistener(\"click\", function TaskListComponent_span_9_Template_span_click_2_listener() {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.clearFilters(\"task_type\"));\n    });\n    i0.ɵɵtext(3, \"x\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\"Task Type: \", ctx_r1.filters.task_type, \" \");\n  }\n}\nfunction TaskListComponent_span_10_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"span\", 31);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementStart(2, \"span\", 32);\n    i0.ɵɵlistener(\"click\", function TaskListComponent_span_10_Template_span_click_2_listener() {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.clearFilters(\"status\"));\n    });\n    i0.ɵɵtext(3, \"x\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\"Status: \", ctx_r1.filters.status, \" \");\n  }\n}\nfunction TaskListComponent_span_11_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"span\", 31);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementStart(2, \"span\", 32);\n    i0.ɵɵlistener(\"click\", function TaskListComponent_span_11_Template_span_click_2_listener() {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.clearFilters(\"contact_person\"));\n    });\n    i0.ɵɵtext(3, \"x\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\"Contact Person: \", ctx_r1.filters.contact_person, \" \");\n  }\n}\nfunction TaskListComponent_span_12_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"span\", 31);\n    i0.ɵɵtext(1);\n    i0.ɵɵpipe(2, \"date\");\n    i0.ɵɵelementStart(3, \"span\", 32);\n    i0.ɵɵlistener(\"click\", function TaskListComponent_span_12_Template_span_click_3_listener() {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.clearFilters(\"task_date\"));\n    });\n    i0.ɵɵtext(4, \"x\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\"Task Date: \", i0.ɵɵpipeBind4(2, 1, ctx_r1.filters.task_date, \"dd MMM yyyy\", \"UTC\", \"en-IN\"), \" \");\n  }\n}\nfunction TaskListComponent_option_24_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 33);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const type_r7 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", type_r7);\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate(type_r7);\n  }\n}\nfunction TaskListComponent_option_41_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 33);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const person_r8 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", person_r8);\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate(person_r8);\n  }\n}\nfunction TaskListComponent_div_73_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 34);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngClass\", ctx_r1.alert.type === \"success\" ? \"alert-success\" : \"alert-error\");\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\" \", ctx_r1.alert.message, \" \");\n  }\n}\nfunction TaskListComponent_div_74_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 35);\n    i0.ɵɵtext(1, \"Loading tasks...\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TaskListComponent_table_75_tr_34_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r9 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\");\n    i0.ɵɵtext(2);\n    i0.ɵɵpipe(3, \"date\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"td\");\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"td\");\n    i0.ɵɵelement(7, \"span\", 39);\n    i0.ɵɵtext(8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"td\");\n    i0.ɵɵtext(10);\n    i0.ɵɵpipe(11, \"date\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(12, \"td\");\n    i0.ɵɵtext(13);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(14, \"td\");\n    i0.ɵɵtext(15);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(16, \"td\")(17, \"span\", 40);\n    i0.ɵɵtext(18);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(19, \"td\")(20, \"div\", 41)(21, \"button\", 42);\n    i0.ɵɵlistener(\"click\", function TaskListComponent_table_75_tr_34_Template_button_click_21_listener() {\n      const task_r10 = i0.ɵɵrestoreView(_r9).$implicit;\n      const ctx_r1 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r1.editTask(task_r10));\n    });\n    i0.ɵɵtext(22, \"Edit\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(23, \"button\", 43);\n    i0.ɵɵlistener(\"click\", function TaskListComponent_table_75_tr_34_Template_button_click_23_listener() {\n      const task_r10 = i0.ɵɵrestoreView(_r9).$implicit;\n      const ctx_r1 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r1.toggleStatus(task_r10));\n    });\n    i0.ɵɵtext(24);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(25, \"button\", 44);\n    i0.ɵɵlistener(\"click\", function TaskListComponent_table_75_tr_34_Template_button_click_25_listener() {\n      const task_r10 = i0.ɵɵrestoreView(_r9).$implicit;\n      const ctx_r1 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r1.deleteTask(task_r10));\n    });\n    i0.ɵɵtext(26, \"Delete\");\n    i0.ɵɵelementEnd()()()();\n  }\n  if (rf & 2) {\n    const task_r10 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind4(3, 10, task_r10.date_created, \"dd MMM yyyy, h:mm:ss a\", \"+0530\", \"en-IN\"));\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(task_r10.entity_name);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngClass\", \"task-type-\" + task_r10.task_type.toLowerCase());\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\" \", task_r10.task_type, \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind4(11, 15, task_r10.task_time, \"dd MMM yyyy, h:mm:ss a\", \"+0530\", \"en-IN\"));\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(task_r10.contact_person);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(task_r10.note || \"-\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngClass\", \"status-\" + task_r10.status);\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\" \", task_r10.status, \" \");\n    i0.ɵɵadvance(6);\n    i0.ɵɵtextInterpolate1(\"Change Status to \", task_r10.status === \"open\" ? \"Closed\" : \"Open\", \"\");\n  }\n}\nfunction TaskListComponent_table_75_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"table\", 36)(1, \"thead\")(2, \"tr\")(3, \"th\");\n    i0.ɵɵtext(4, \"Date Created \");\n    i0.ɵɵelementStart(5, \"span\", 37);\n    i0.ɵɵtext(6, \"\\uD83D\\uDCC5\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(7, \"th\");\n    i0.ɵɵtext(8, \"Entity Name \");\n    i0.ɵɵelementStart(9, \"span\", 37);\n    i0.ɵɵtext(10, \"\\u25BC\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(11, \"th\");\n    i0.ɵɵtext(12, \"Task Type \");\n    i0.ɵɵelementStart(13, \"span\", 37);\n    i0.ɵɵtext(14, \"\\u25BC\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(15, \"th\");\n    i0.ɵɵtext(16, \"Task Time \");\n    i0.ɵɵelementStart(17, \"span\", 37);\n    i0.ɵɵtext(18, \"\\u25BC\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(19, \"th\");\n    i0.ɵɵtext(20, \"Contact Person \");\n    i0.ɵɵelementStart(21, \"span\", 37);\n    i0.ɵɵtext(22, \"\\u25BC\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(23, \"th\");\n    i0.ɵɵtext(24, \"Notes \");\n    i0.ɵɵelementStart(25, \"span\", 37);\n    i0.ɵɵtext(26, \"\\u25BC\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(27, \"th\");\n    i0.ɵɵtext(28, \"Status \");\n    i0.ɵɵelementStart(29, \"span\", 37);\n    i0.ɵɵtext(30, \"\\u25BC\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(31, \"th\");\n    i0.ɵɵtext(32, \"Options\");\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(33, \"tbody\");\n    i0.ɵɵtemplate(34, TaskListComponent_table_75_tr_34_Template, 27, 20, \"tr\", 38);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(34);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.tasks);\n  }\n}\nfunction TaskListComponent_div_76_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 35);\n    i0.ɵɵtext(1, \" No tasks found. Create a new task to get started. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TaskListComponent_div_77_option_24_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 33);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const hour_r12 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", hour_r12);\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate(hour_r12);\n  }\n}\nfunction TaskListComponent_div_77_option_26_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 33);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const minute_r13 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", minute_r13);\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate(minute_r13);\n  }\n}\nfunction TaskListComponent_div_77_option_37_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"option\", 33);\n  }\n  if (rf & 2) {\n    const type_r14 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", type_r14);\n  }\n}\nfunction TaskListComponent_div_77_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r11 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 45);\n    i0.ɵɵlistener(\"click\", function TaskListComponent_div_77_Template_div_click_0_listener() {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.closeModal());\n    });\n    i0.ɵɵelementStart(1, \"div\", 46);\n    i0.ɵɵlistener(\"click\", function TaskListComponent_div_77_Template_div_click_1_listener($event) {\n      i0.ɵɵrestoreView(_r11);\n      return i0.ɵɵresetView($event.stopPropagation());\n    });\n    i0.ɵɵelementStart(2, \"div\", 47)(3, \"h3\", 48);\n    i0.ɵɵtext(4, \"NEW TASK\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"div\", 49)(6, \"button\", 50);\n    i0.ɵɵlistener(\"click\", function TaskListComponent_div_77_Template_button_click_6_listener() {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.taskForm.status = \"open\");\n    });\n    i0.ɵɵtext(7, \"Open\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"button\", 50);\n    i0.ɵɵlistener(\"click\", function TaskListComponent_div_77_Template_button_click_8_listener() {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.taskForm.status = \"closed\");\n    });\n    i0.ɵɵtext(9, \"Closed\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(10, \"button\", 51);\n    i0.ɵɵlistener(\"click\", function TaskListComponent_div_77_Template_button_click_10_listener() {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.closeModal());\n    });\n    i0.ɵɵtext(11, \"\\u00D7\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(12, \"form\", 52);\n    i0.ɵɵlistener(\"ngSubmit\", function TaskListComponent_div_77_Template_form_ngSubmit_12_listener() {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.saveTask());\n    });\n    i0.ɵɵelementStart(13, \"div\", 8)(14, \"label\", 9);\n    i0.ɵɵtext(15, \"Entity name\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(16, \"input\", 53);\n    i0.ɵɵtwoWayListener(\"ngModelChange\", function TaskListComponent_div_77_Template_input_ngModelChange_16_listener($event) {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r1 = i0.ɵɵnextContext();\n      i0.ɵɵtwoWayBindingSet(ctx_r1.taskForm.entity_name, $event) || (ctx_r1.taskForm.entity_name = $event);\n      return i0.ɵɵresetView($event);\n    });\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(17, \"div\", 54)(18, \"label\", 9);\n    i0.ɵɵtext(19, \"Date\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(20, \"input\", 55);\n    i0.ɵɵtwoWayListener(\"ngModelChange\", function TaskListComponent_div_77_Template_input_ngModelChange_20_listener($event) {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r1 = i0.ɵɵnextContext();\n      i0.ɵɵtwoWayBindingSet(ctx_r1.taskForm.task_date, $event) || (ctx_r1.taskForm.task_date = $event);\n      return i0.ɵɵresetView($event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(21, \"label\", 9);\n    i0.ɵɵtext(22, \"Time\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(23, \"select\", 56);\n    i0.ɵɵtwoWayListener(\"ngModelChange\", function TaskListComponent_div_77_Template_select_ngModelChange_23_listener($event) {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r1 = i0.ɵɵnextContext();\n      i0.ɵɵtwoWayBindingSet(ctx_r1.taskForm.task_time_hour, $event) || (ctx_r1.taskForm.task_time_hour = $event);\n      return i0.ɵɵresetView($event);\n    });\n    i0.ɵɵtemplate(24, TaskListComponent_div_77_option_24_Template, 2, 2, \"option\", 13);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(25, \"select\", 57);\n    i0.ɵɵtwoWayListener(\"ngModelChange\", function TaskListComponent_div_77_Template_select_ngModelChange_25_listener($event) {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r1 = i0.ɵɵnextContext();\n      i0.ɵɵtwoWayBindingSet(ctx_r1.taskForm.task_time_minute, $event) || (ctx_r1.taskForm.task_time_minute = $event);\n      return i0.ɵɵresetView($event);\n    });\n    i0.ɵɵtemplate(26, TaskListComponent_div_77_option_26_Template, 2, 2, \"option\", 13);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(27, \"select\", 58);\n    i0.ɵɵtwoWayListener(\"ngModelChange\", function TaskListComponent_div_77_Template_select_ngModelChange_27_listener($event) {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r1 = i0.ɵɵnextContext();\n      i0.ɵɵtwoWayBindingSet(ctx_r1.taskForm.task_time_ampm, $event) || (ctx_r1.taskForm.task_time_ampm = $event);\n      return i0.ɵɵresetView($event);\n    });\n    i0.ɵɵelementStart(28, \"option\", 59);\n    i0.ɵɵtext(29, \"AM\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(30, \"option\", 60);\n    i0.ɵɵtext(31, \"PM\");\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(32, \"div\", 8)(33, \"label\", 9);\n    i0.ɵɵtext(34, \"Task type\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(35, \"input\", 61);\n    i0.ɵɵtwoWayListener(\"ngModelChange\", function TaskListComponent_div_77_Template_input_ngModelChange_35_listener($event) {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r1 = i0.ɵɵnextContext();\n      i0.ɵɵtwoWayBindingSet(ctx_r1.taskForm.task_type, $event) || (ctx_r1.taskForm.task_type = $event);\n      return i0.ɵɵresetView($event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(36, \"datalist\", 62);\n    i0.ɵɵtemplate(37, TaskListComponent_div_77_option_37_Template, 1, 1, \"option\", 13);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(38, \"div\", 8)(39, \"label\", 9);\n    i0.ɵɵtext(40, \"Contact person\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(41, \"input\", 63);\n    i0.ɵɵtwoWayListener(\"ngModelChange\", function TaskListComponent_div_77_Template_input_ngModelChange_41_listener($event) {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r1 = i0.ɵɵnextContext();\n      i0.ɵɵtwoWayBindingSet(ctx_r1.taskForm.contact_person, $event) || (ctx_r1.taskForm.contact_person = $event);\n      return i0.ɵɵresetView($event);\n    });\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(42, \"div\", 8)(43, \"label\", 9);\n    i0.ɵɵtext(44, \"Note (optional)\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(45, \"textarea\", 64);\n    i0.ɵɵtwoWayListener(\"ngModelChange\", function TaskListComponent_div_77_Template_textarea_ngModelChange_45_listener($event) {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r1 = i0.ɵɵnextContext();\n      i0.ɵɵtwoWayBindingSet(ctx_r1.taskForm.note, $event) || (ctx_r1.taskForm.note = $event);\n      return i0.ɵɵresetView($event);\n    });\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(46, \"div\", 65)(47, \"button\", 66);\n    i0.ɵɵlistener(\"click\", function TaskListComponent_div_77_Template_button_click_47_listener() {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.closeModal());\n    });\n    i0.ɵɵtext(48, \"CANCEL\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(49, \"button\", 67);\n    i0.ɵɵtext(50, \"SAVE\");\n    i0.ɵɵelementEnd()()()()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(6);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(13, _c0, ctx_r1.taskForm.status === \"open\"));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(15, _c0, ctx_r1.taskForm.status === \"closed\"));\n    i0.ɵɵadvance(8);\n    i0.ɵɵtwoWayProperty(\"ngModel\", ctx_r1.taskForm.entity_name);\n    i0.ɵɵadvance(4);\n    i0.ɵɵtwoWayProperty(\"ngModel\", ctx_r1.taskForm.task_date);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtwoWayProperty(\"ngModel\", ctx_r1.taskForm.task_time_hour);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.hours);\n    i0.ɵɵadvance();\n    i0.ɵɵtwoWayProperty(\"ngModel\", ctx_r1.taskForm.task_time_minute);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.minutes);\n    i0.ɵɵadvance();\n    i0.ɵɵtwoWayProperty(\"ngModel\", ctx_r1.taskForm.task_time_ampm);\n    i0.ɵɵadvance(8);\n    i0.ɵɵtwoWayProperty(\"ngModel\", ctx_r1.taskForm.task_type);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.taskTypes);\n    i0.ɵɵadvance(4);\n    i0.ɵɵtwoWayProperty(\"ngModel\", ctx_r1.taskForm.contact_person);\n    i0.ɵɵadvance(4);\n    i0.ɵɵtwoWayProperty(\"ngModel\", ctx_r1.taskForm.note);\n  }\n}\nexport let TaskListComponent = /*#__PURE__*/(() => {\n  class TaskListComponent {\n    constructor(taskService, datePipe) {\n      this.taskService = taskService;\n      this.datePipe = datePipe;\n      this.tasks = [];\n      this.taskTypes = [];\n      this.contactPersons = [];\n      this.loading = false;\n      this.showModal = false;\n      this.editingTask = null;\n      this.filters = {\n        entity_name: '',\n        task_type: '',\n        status: '',\n        contact_person: '',\n        task_date: '',\n        sort_by: 'date_created',\n        sort_order: ''\n      };\n      this.taskForm = {\n        entity_name: '',\n        task_type: '',\n        task_date: '',\n        task_time_hour: '12',\n        task_time_minute: '00',\n        task_time_ampm: 'PM',\n        contact_person: '',\n        note: '',\n        status: 'open'\n      };\n      this.hours = Array.from({\n        length: 12\n      }, (_, i) => (i + 1).toString().padStart(2, '0'));\n      this.minutes = ['00', '15', '30', '45'];\n      this.alert = null;\n    } // Injected DatePipe\n    ngOnInit() {\n      this.loadTasks();\n      this.loadTaskTypes();\n      this.loadContactPersons();\n    }\n    loadTasks() {\n      this.loading = true;\n      this.taskService.getTasks(this.filters).subscribe({\n        next: tasks => {\n          this.tasks = tasks;\n          this.loading = false;\n        },\n        error: error => {\n          this.showAlert('error', 'Error loading tasks: ' + error.message);\n          this.loading = false;\n        }\n      });\n    }\n    loadTaskTypes() {\n      console.log('Calling loadTaskTypes...');\n      this.taskService.getTaskTypes().subscribe({\n        next: types => {\n          this.taskTypes = types;\n          console.log('Task types loaded:', this.taskTypes);\n        },\n        error: error => console.error('Error loading task types:', error)\n      });\n    }\n    loadContactPersons() {\n      this.taskService.getContactPersons().subscribe({\n        next: persons => this.contactPersons = persons,\n        error: error => console.error('Error loading contact persons:', error)\n      });\n    }\n    showCreateModal() {\n      this.editingTask = null;\n      this.taskForm = {\n        entity_name: '',\n        task_type: '',\n        task_date: '',\n        task_time_hour: '12',\n        task_time_minute: '00',\n        task_time_ampm: 'PM',\n        contact_person: '',\n        note: '',\n        status: 'open'\n      };\n      this.showModal = true;\n    }\n    editTask(task) {\n      this.editingTask = task;\n      const taskDateTime = new Date(task.task_time);\n      this.taskForm = {\n        entity_name: task.entity_name,\n        task_type: task.task_type,\n        task_date: taskDateTime.toISOString().slice(0, 10),\n        task_time_hour: this.formatHourForInput(taskDateTime),\n        task_time_minute: this.formatMinuteForInput(taskDateTime),\n        task_time_ampm: this.formatAmPmForInput(taskDateTime),\n        contact_person: task.contact_person,\n        note: task.note || '',\n        status: task.status\n      };\n      this.showModal = true;\n    }\n    duplicateTask(task) {\n      this.editingTask = null;\n      const taskDateTime = new Date(task.task_time);\n      this.taskForm = {\n        entity_name: task.entity_name,\n        task_type: task.task_type,\n        task_date: taskDateTime.toISOString().slice(0, 10),\n        task_time_hour: this.formatHourForInput(taskDateTime),\n        task_time_minute: this.formatMinuteForInput(taskDateTime),\n        task_time_ampm: this.formatAmPmForInput(taskDateTime),\n        contact_person: task.contact_person,\n        note: task.note || '',\n        status: 'open'\n      };\n      this.showModal = true;\n    }\n    saveTask() {\n      if (!this.taskForm.entity_name?.trim()) {\n        this.showAlert('error', 'Entity name is required');\n        return;\n      }\n      if (!this.taskForm.task_type?.trim()) {\n        this.showAlert('error', 'Task type is required');\n        return;\n      }\n      if (!this.taskForm.task_date) {\n        this.showAlert('error', 'Date is required');\n        return;\n      }\n      if (!this.taskForm.task_time_hour || !this.taskForm.task_time_minute || !this.taskForm.task_time_ampm) {\n        this.showAlert('error', 'Time is required');\n        return;\n      }\n      if (!this.taskForm.contact_person?.trim()) {\n        this.showAlert('error', 'Contact person is required');\n        return;\n      }\n      let hour = parseInt(this.taskForm.task_time_hour, 10);\n      if (this.taskForm.task_time_ampm === 'PM' && hour !== 12) {\n        hour += 12;\n      } else if (this.taskForm.task_time_ampm === 'AM' && hour === 12) {\n        hour = 0; // Midnight\n      }\n      const fullTaskTime = new Date(`${this.taskForm.task_date}T${hour.toString().padStart(2, '0')}:${this.taskForm.task_time_minute}:00`);\n      const now = new Date();\n      if (fullTaskTime < now) {\n        this.showAlert('error', 'Task due time cannot be in the past');\n        return;\n      }\n      const taskToSend = {\n        entity_name: this.taskForm.entity_name.trim(),\n        task_type: this.taskForm.task_type.trim(),\n        task_time: fullTaskTime.toISOString(),\n        contact_person: this.taskForm.contact_person.trim(),\n        note: this.taskForm.note?.trim() || '',\n        status: this.taskForm.status\n      };\n      if (this.editingTask) {\n        this.taskService.updateTask(this.editingTask.id, taskToSend).subscribe({\n          next: () => {\n            this.showAlert('success', 'Task updated successfully');\n            this.closeModal();\n            this.loadTasks();\n          },\n          error: error => this.showAlert('error', 'Error updating task: ' + error.message)\n        });\n      } else {\n        this.taskService.createTask(taskToSend).subscribe({\n          next: () => {\n            this.showAlert('success', 'Task created successfully');\n            this.closeModal();\n            this.loadTasks();\n            this.loadTaskTypes();\n            this.loadContactPersons();\n          },\n          error: error => this.showAlert('error', 'Error creating task: ' + error.message)\n        });\n      }\n    }\n    toggleStatus(task) {\n      const newStatus = task.status === 'open' ? 'closed' : 'open';\n      this.taskService.updateTaskStatus(task.id, newStatus).subscribe({\n        next: () => {\n          this.showAlert('success', `Task status changed to ${newStatus}`);\n          this.loadTasks();\n        },\n        error: error => this.showAlert('error', 'Error updating task status: ' + error.message)\n      });\n    }\n    deleteTask(task) {\n      if (confirm('Are you sure you want to delete this task?')) {\n        this.taskService.deleteTask(task.id).subscribe({\n          next: () => {\n            this.showAlert('success', 'Task deleted successfully');\n            this.loadTasks();\n          },\n          error: error => this.showAlert('error', 'Error deleting task: ' + error.message)\n        });\n      }\n    }\n    closeModal() {\n      this.showModal = false;\n      this.editingTask = null;\n    }\n    clearFilters(filterKey) {\n      if (filterKey) {\n        if (filterKey === 'sort_order') {\n          this.filters[filterKey] = undefined;\n        } else {\n          this.filters[filterKey] = '';\n        }\n      } else {\n        this.filters = {\n          entity_name: '',\n          task_type: '',\n          status: '',\n          contact_person: '',\n          task_date: '',\n          sort_by: 'date_created',\n          sort_order: undefined\n        };\n      }\n      this.loadTasks();\n    }\n    showAlert(type, message) {\n      this.alert = {\n        type,\n        message\n      };\n      setTimeout(() => this.alert = null, 5000);\n    }\n    // Removed custom date formatting methods as DatePipe is used in template now.\n    // formatDate(dateString: string): string {\n    //   return new Date(dateString).toLocaleDateString('en-GB', { day: '2-digit', month: 'short', year: 'numeric' });\n    // }\n    // formatTime(dateString: string): string {\n    //   return new Date(dateString).toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit', hour12: true });\n    // }\n    // formatFullDateTime(dateString: string): string {\n    //   const date = new Date(dateString);\n    //   const formattedDate = date.toLocaleDateString('en-GB', { day: '2-digit', month: 'short', year: 'numeric' });\n    //   const formattedTime = date.toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit', hour12: true });\n    //   return `${formattedDate} ${formattedTime}`;\n    // }\n    formatHourForInput(date) {\n      let hour = date.getHours();\n      hour = hour % 12;\n      hour = hour ? hour : 12; // the hour '0' should be '12'\n      return hour.toString().padStart(2, '0');\n    }\n    formatMinuteForInput(date) {\n      return date.getMinutes().toString().padStart(2, '0');\n    }\n    formatAmPmForInput(date) {\n      return date.getHours() >= 12 ? 'PM' : 'AM';\n    }\n    static {\n      this.ɵfac = function TaskListComponent_Factory(t) {\n        return new (t || TaskListComponent)(i0.ɵɵdirectiveInject(i1.TaskService), i0.ɵɵdirectiveInject(i2.DatePipe));\n      };\n    }\n    static {\n      this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n        type: TaskListComponent,\n        selectors: [[\"app-task-list\"]],\n        standalone: true,\n        features: [i0.ɵɵProvidersFeature([DatePipe]), i0.ɵɵStandaloneFeature],\n        decls: 78,\n        vars: 19,\n        consts: [[1, \"card\"], [1, \"card-header\", 2, \"display\", \"flex\", \"justify-content\", \"space-between\", \"align-items\", \"center\"], [1, \"card-title\"], [2, \"display\", \"flex\", \"align-items\", \"center\", \"gap\", \"1rem\"], [1, \"btn\", \"btn-success\", 3, \"click\"], [1, \"active-filters\"], [\"class\", \"active-filter-badge\", 4, \"ngIf\"], [1, \"filters\"], [1, \"form-group\"], [1, \"form-label\"], [\"type\", \"text\", \"placeholder\", \"Filter by entity name\", 1, \"form-control\", 3, \"ngModelChange\", \"ngModel\"], [1, \"form-control\", 3, \"ngModelChange\", \"ngModel\"], [\"value\", \"\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"value\", \"open\"], [\"value\", \"closed\"], [\"type\", \"date\", 1, \"form-control\", 3, \"ngModelChange\", \"ngModel\"], [\"value\", \"date_created\"], [\"value\", \"entity_name\"], [\"value\", \"task_type\"], [\"value\", \"task_time\"], [\"value\", \"contact_person\"], [\"value\", \"status\"], [\"value\", \"\", \"disabled\", \"\", \"selected\", \"\"], [\"value\", \"desc\"], [\"value\", \"asc\"], [1, \"actions\", 2, \"display\", \"none\"], [\"class\", \"alert\", 3, \"ngClass\", 4, \"ngIf\"], [\"class\", \"loading\", 4, \"ngIf\"], [\"class\", \"table\", 4, \"ngIf\"], [\"class\", \"modal\", 3, \"click\", 4, \"ngIf\"], [1, \"active-filter-badge\"], [1, \"clear-filter\", 3, \"click\"], [3, \"value\"], [1, \"alert\", 3, \"ngClass\"], [1, \"loading\"], [1, \"table\"], [1, \"filter-icon\"], [4, \"ngFor\", \"ngForOf\"], [1, \"task-type-icon\", 3, \"ngClass\"], [1, \"status-badge\", 3, \"ngClass\"], [2, \"display\", \"flex\", \"gap\", \"0.5rem\"], [1, \"btn\", \"btn-primary\", \"btn-sm\", 3, \"click\"], [1, \"btn\", \"btn-info\", \"btn-sm\", 3, \"click\"], [1, \"btn\", \"btn-danger\", \"btn-sm\", 3, \"click\"], [1, \"modal\", 3, \"click\"], [1, \"modal-content\", 3, \"click\"], [1, \"modal-header\"], [1, \"modal-title\"], [1, \"status-toggle\"], [3, \"click\", \"ngClass\"], [1, \"close\", 3, \"click\"], [3, \"ngSubmit\"], [\"type\", \"text\", \"name\", \"entity_name\", \"required\", \"\", 1, \"form-control\", 3, \"ngModelChange\", \"ngModel\"], [1, \"form-group\", \"date-time-group\"], [\"type\", \"date\", \"name\", \"task_date\", \"required\", \"\", 1, \"form-control\", 3, \"ngModelChange\", \"ngModel\"], [\"name\", \"task_time_hour\", \"required\", \"\", 1, \"form-control\", 3, \"ngModelChange\", \"ngModel\"], [\"name\", \"task_time_minute\", \"required\", \"\", 1, \"form-control\", 3, \"ngModelChange\", \"ngModel\"], [\"name\", \"task_time_ampm\", \"required\", \"\", 1, \"form-control\", 3, \"ngModelChange\", \"ngModel\"], [\"value\", \"AM\"], [\"value\", \"PM\"], [\"list\", \"taskTypesList\", \"name\", \"task_type\", \"required\", \"\", 1, \"form-control\", 3, \"ngModelChange\", \"ngModel\"], [\"id\", \"taskTypesList\"], [\"type\", \"text\", \"name\", \"contact_person\", \"required\", \"\", 1, \"form-control\", 3, \"ngModelChange\", \"ngModel\"], [\"name\", \"note\", \"rows\", \"3\", 1, \"form-control\", 3, \"ngModelChange\", \"ngModel\"], [2, \"display\", \"flex\", \"gap\", \"10px\", \"justify-content\", \"flex-end\", \"margin-top\", \"2rem\"], [\"type\", \"button\", 1, \"btn\", \"btn-cancel\", 3, \"click\"], [\"type\", \"submit\", 1, \"btn\", \"btn-save\"]],\n        template: function TaskListComponent_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"h2\", 2);\n            i0.ɵɵtext(3, \"SALES LOG\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(4, \"div\", 3)(5, \"button\", 4);\n            i0.ɵɵlistener(\"click\", function TaskListComponent_Template_button_click_5_listener() {\n              return ctx.showCreateModal();\n            });\n            i0.ɵɵtext(6, \"+ New Task\");\n            i0.ɵɵelementEnd()()();\n            i0.ɵɵelementStart(7, \"div\", 5);\n            i0.ɵɵtemplate(8, TaskListComponent_span_8_Template, 4, 1, \"span\", 6)(9, TaskListComponent_span_9_Template, 4, 1, \"span\", 6)(10, TaskListComponent_span_10_Template, 4, 1, \"span\", 6)(11, TaskListComponent_span_11_Template, 4, 1, \"span\", 6)(12, TaskListComponent_span_12_Template, 5, 6, \"span\", 6);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(13, \"div\", 7)(14, \"div\", 8)(15, \"label\", 9);\n            i0.ɵɵtext(16, \"Entity Name\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(17, \"input\", 10);\n            i0.ɵɵtwoWayListener(\"ngModelChange\", function TaskListComponent_Template_input_ngModelChange_17_listener($event) {\n              i0.ɵɵtwoWayBindingSet(ctx.filters.entity_name, $event) || (ctx.filters.entity_name = $event);\n              return $event;\n            });\n            i0.ɵɵlistener(\"ngModelChange\", function TaskListComponent_Template_input_ngModelChange_17_listener() {\n              return ctx.loadTasks();\n            });\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(18, \"div\", 8)(19, \"label\", 9);\n            i0.ɵɵtext(20, \"Task Type\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(21, \"select\", 11);\n            i0.ɵɵtwoWayListener(\"ngModelChange\", function TaskListComponent_Template_select_ngModelChange_21_listener($event) {\n              i0.ɵɵtwoWayBindingSet(ctx.filters.task_type, $event) || (ctx.filters.task_type = $event);\n              return $event;\n            });\n            i0.ɵɵlistener(\"ngModelChange\", function TaskListComponent_Template_select_ngModelChange_21_listener() {\n              return ctx.loadTasks();\n            });\n            i0.ɵɵelementStart(22, \"option\", 12);\n            i0.ɵɵtext(23, \"All Types\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵtemplate(24, TaskListComponent_option_24_Template, 2, 2, \"option\", 13);\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(25, \"div\", 8)(26, \"label\", 9);\n            i0.ɵɵtext(27, \"Status\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(28, \"select\", 11);\n            i0.ɵɵtwoWayListener(\"ngModelChange\", function TaskListComponent_Template_select_ngModelChange_28_listener($event) {\n              i0.ɵɵtwoWayBindingSet(ctx.filters.status, $event) || (ctx.filters.status = $event);\n              return $event;\n            });\n            i0.ɵɵlistener(\"ngModelChange\", function TaskListComponent_Template_select_ngModelChange_28_listener() {\n              return ctx.loadTasks();\n            });\n            i0.ɵɵelementStart(29, \"option\", 12);\n            i0.ɵɵtext(30, \"All Status\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(31, \"option\", 14);\n            i0.ɵɵtext(32, \"Open\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(33, \"option\", 15);\n            i0.ɵɵtext(34, \"Closed\");\n            i0.ɵɵelementEnd()()();\n            i0.ɵɵelementStart(35, \"div\", 8)(36, \"label\", 9);\n            i0.ɵɵtext(37, \"Contact Person\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(38, \"select\", 11);\n            i0.ɵɵtwoWayListener(\"ngModelChange\", function TaskListComponent_Template_select_ngModelChange_38_listener($event) {\n              i0.ɵɵtwoWayBindingSet(ctx.filters.contact_person, $event) || (ctx.filters.contact_person = $event);\n              return $event;\n            });\n            i0.ɵɵlistener(\"ngModelChange\", function TaskListComponent_Template_select_ngModelChange_38_listener() {\n              return ctx.loadTasks();\n            });\n            i0.ɵɵelementStart(39, \"option\", 12);\n            i0.ɵɵtext(40, \"All Persons\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵtemplate(41, TaskListComponent_option_41_Template, 2, 2, \"option\", 13);\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(42, \"div\", 8)(43, \"label\", 9);\n            i0.ɵɵtext(44, \"Task Due Date\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(45, \"input\", 16);\n            i0.ɵɵtwoWayListener(\"ngModelChange\", function TaskListComponent_Template_input_ngModelChange_45_listener($event) {\n              i0.ɵɵtwoWayBindingSet(ctx.filters.task_date, $event) || (ctx.filters.task_date = $event);\n              return $event;\n            });\n            i0.ɵɵlistener(\"ngModelChange\", function TaskListComponent_Template_input_ngModelChange_45_listener() {\n              return ctx.loadTasks();\n            });\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(46, \"div\", 8)(47, \"label\", 9);\n            i0.ɵɵtext(48, \"Sort By\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(49, \"select\", 11);\n            i0.ɵɵtwoWayListener(\"ngModelChange\", function TaskListComponent_Template_select_ngModelChange_49_listener($event) {\n              i0.ɵɵtwoWayBindingSet(ctx.filters.sort_by, $event) || (ctx.filters.sort_by = $event);\n              return $event;\n            });\n            i0.ɵɵlistener(\"ngModelChange\", function TaskListComponent_Template_select_ngModelChange_49_listener() {\n              return ctx.loadTasks();\n            });\n            i0.ɵɵelementStart(50, \"option\", 17);\n            i0.ɵɵtext(51, \"Date Created\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(52, \"option\", 18);\n            i0.ɵɵtext(53, \"Entity Name\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(54, \"option\", 19);\n            i0.ɵɵtext(55, \"Task Type\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(56, \"option\", 20);\n            i0.ɵɵtext(57, \"Task Time\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(58, \"option\", 21);\n            i0.ɵɵtext(59, \"Contact Person\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(60, \"option\", 22);\n            i0.ɵɵtext(61, \"Status\");\n            i0.ɵɵelementEnd()()();\n            i0.ɵɵelementStart(62, \"div\", 8)(63, \"label\", 9);\n            i0.ɵɵtext(64, \"Sort Order\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(65, \"select\", 11);\n            i0.ɵɵtwoWayListener(\"ngModelChange\", function TaskListComponent_Template_select_ngModelChange_65_listener($event) {\n              i0.ɵɵtwoWayBindingSet(ctx.filters.sort_order, $event) || (ctx.filters.sort_order = $event);\n              return $event;\n            });\n            i0.ɵɵlistener(\"ngModelChange\", function TaskListComponent_Template_select_ngModelChange_65_listener() {\n              return ctx.loadTasks();\n            });\n            i0.ɵɵelementStart(66, \"option\", 23);\n            i0.ɵɵtext(67, \"Select Order\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(68, \"option\", 24);\n            i0.ɵɵtext(69, \"Descending\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(70, \"option\", 25);\n            i0.ɵɵtext(71, \"Ascending\");\n            i0.ɵɵelementEnd()()()();\n            i0.ɵɵelement(72, \"div\", 26);\n            i0.ɵɵtemplate(73, TaskListComponent_div_73_Template, 2, 2, \"div\", 27)(74, TaskListComponent_div_74_Template, 2, 0, \"div\", 28)(75, TaskListComponent_table_75_Template, 35, 1, \"table\", 29)(76, TaskListComponent_div_76_Template, 2, 0, \"div\", 28);\n            i0.ɵɵelementEnd();\n            i0.ɵɵtemplate(77, TaskListComponent_div_77_Template, 51, 17, \"div\", 30);\n          }\n          if (rf & 2) {\n            i0.ɵɵadvance(8);\n            i0.ɵɵproperty(\"ngIf\", ctx.filters.entity_name);\n            i0.ɵɵadvance();\n            i0.ɵɵproperty(\"ngIf\", ctx.filters.task_type);\n            i0.ɵɵadvance();\n            i0.ɵɵproperty(\"ngIf\", ctx.filters.status);\n            i0.ɵɵadvance();\n            i0.ɵɵproperty(\"ngIf\", ctx.filters.contact_person);\n            i0.ɵɵadvance();\n            i0.ɵɵproperty(\"ngIf\", ctx.filters.task_date);\n            i0.ɵɵadvance(5);\n            i0.ɵɵtwoWayProperty(\"ngModel\", ctx.filters.entity_name);\n            i0.ɵɵadvance(4);\n            i0.ɵɵtwoWayProperty(\"ngModel\", ctx.filters.task_type);\n            i0.ɵɵadvance(3);\n            i0.ɵɵproperty(\"ngForOf\", ctx.taskTypes);\n            i0.ɵɵadvance(4);\n            i0.ɵɵtwoWayProperty(\"ngModel\", ctx.filters.status);\n            i0.ɵɵadvance(10);\n            i0.ɵɵtwoWayProperty(\"ngModel\", ctx.filters.contact_person);\n            i0.ɵɵadvance(3);\n            i0.ɵɵproperty(\"ngForOf\", ctx.contactPersons);\n            i0.ɵɵadvance(4);\n            i0.ɵɵtwoWayProperty(\"ngModel\", ctx.filters.task_date);\n            i0.ɵɵadvance(4);\n            i0.ɵɵtwoWayProperty(\"ngModel\", ctx.filters.sort_by);\n            i0.ɵɵadvance(16);\n            i0.ɵɵtwoWayProperty(\"ngModel\", ctx.filters.sort_order);\n            i0.ɵɵadvance(8);\n            i0.ɵɵproperty(\"ngIf\", ctx.alert);\n            i0.ɵɵadvance();\n            i0.ɵɵproperty(\"ngIf\", ctx.loading);\n            i0.ɵɵadvance();\n            i0.ɵɵproperty(\"ngIf\", !ctx.loading && ctx.tasks.length > 0);\n            i0.ɵɵadvance();\n            i0.ɵɵproperty(\"ngIf\", !ctx.loading && ctx.tasks.length === 0);\n            i0.ɵɵadvance();\n            i0.ɵɵproperty(\"ngIf\", ctx.showModal);\n          }\n        },\n        dependencies: [CommonModule, i2.NgClass, i2.NgForOf, i2.NgIf, i2.DatePipe, FormsModule, i3.ɵNgNoValidate, i3.NgSelectOption, i3.ɵNgSelectMultipleOption, i3.DefaultValueAccessor, i3.SelectControlValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.RequiredValidator, i3.NgModel, i3.NgForm],\n        encapsulation: 2\n      });\n    }\n  }\n  return TaskListComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}